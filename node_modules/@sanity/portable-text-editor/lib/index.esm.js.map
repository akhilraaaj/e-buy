{"version":3,"file":"index.esm.js","sources":["../src/utils/schema.ts","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/utils/debug.ts","../src/editor/hooks/usePortableTextEditorKeyGenerator.ts","../src/utils/weakMaps.ts","../src/utils/values.ts","../../../../node_modules/diff-match-patch/index.js","../src/patch/patches.ts","../src/utils/operationToPatches.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/utils/withPreserveKeys.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/withoutPatching.ts","../src/patch/arrayInsert.ts","../src/patch/array.ts","../src/patch/object.ts","../src/patch/primitive.ts","../src/patch/string.ts","../src/patch/applyPatch.ts","../src/utils/patchToOperations.ts","../src/utils/bufferUntil.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/utils/validateValue.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/components/SlateContainer.tsx","../src/constants.ts","../src/editor/hooks/usePortableTextEditorSelection.ts","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/hooks/usePortableTextEditorValue.ts","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/components/Validator.tsx","../src/editor/PortableTextEditor.tsx","../src/utils/patches.ts","../src/utils/selection.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/editor/components/DraggableChild.tsx","../src/editor/components/Leaf.tsx","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/useForwardedRef.ts","../src/editor/Editable.tsx"],"sourcesContent":["import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as BlockSchemaType | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find((field) => field.name === 'children') as\n    | {type: ArraySchemaType}\n    | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error('Valid types for block children not found in schema (required)')\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter((memberType) => memberType.name !== 'span') ||\n    []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter((field) => field.name !== blockType.name) ||\n    []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === 'style')\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter((style: {value: string}) => style.value)\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find((btField) => btField.name === 'list')\n  if (!listField) {\n    throw new Error(\"A field with name 'list' is not defined in the block type (required).\")\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {randomKey} from '@sanity/util/content'\nimport {createContext, useContext} from 'react'\n\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\n/**\n * A React context for sharing the editor's keyGenerator.\n */\nexport const PortableTextEditorKeyGeneratorContext =\n  createContext<() => string>(defaultKeyGenerator)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorKeyGenerator = (): (() => string) => {\n  const keyGenerator = useContext(PortableTextEditorKeyGeneratorContext)\n\n  if (keyGenerator === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorKeyGenerator\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return keyGenerator\n}\n","import {Editor, Element, Range, Text} from 'slate'\nimport {EditorSelection} from '..'\n\n/**\n * Dragging\n */\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\nexport const IS_DRAGGING_CHILD_ELEMENT: WeakMap<Editor, Element | Text> = new WeakMap()\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> = new WeakMap()\nexport const IS_DRAGGING_ELEMENT_RANGE: WeakMap<Editor, Range> = new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<Editor, 'top' | 'bottom'> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<Range, EditorSelection>()\n","import {isEqual} from 'lodash'\nimport {Node, Element, Text, Descendant} from 'slate'\nimport {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nconst EMPTY_MARKDEFS: PortableTextObject[] = []\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {}\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [{_key: `${_key}-void-child`, _type: 'span', text: '', marks: []}]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const children = textBlock.children.map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap\n            )\n          }\n          // Original object\n          return child\n        })\n        if (!hasMissingStyle && !hasMissingMarkDefs && !hasInlines && Element.isElement(block)) {\n          // Original object\n          return block\n        }\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        if (hasMissingMarkDefs) {\n          rest.markDefs = EMPTY_MARKDEFS\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: (Node | Partial<Node>)[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {}\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (_type === textBlockType && 'children' in block && Array.isArray(block.children) && _key) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest} = child\n          return keepObjectEquality({...rest, ...v, _key: k as string, _type: t as string}, keyMap)\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality({...block, children, _key, _type}, keyMap) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  types: PortableTextMemberSchemaTypes\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === types.block.name &&\n      'style' in children[0] &&\n      children[0].style === types.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[]\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) => Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment)\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) => isEqual({_key: child._key}, secondPathSegment))\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[]\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","import {Path, PathSegment} from '@sanity/types'\nimport * as DMP from 'diff-match-patch'\n\nimport type {\n  SetIfMissingPatch,\n  InsertPatch,\n  InsertPosition,\n  SetPatch,\n  UnsetPatch,\n  DiffMatchPatch,\n} from '../types/patch'\n\nexport function setIfMissing(value: any, path: Path = []): SetIfMissingPatch {\n  return {\n    type: 'setIfMissing',\n    path,\n    value,\n  }\n}\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function diffMatchPatch(\n  currentValue: string,\n  nextValue: string,\n  path: Path = []\n): DiffMatchPatch {\n  const patch = dmp\n    .patch_make(currentValue, nextValue)\n    .map((_patch) => _patch.toString())\n    .join('')\n  return {type: 'diffMatchPatch', path, value: patch}\n}\n\nexport function insert(items: any[], position: InsertPosition, path: Path = []): InsertPatch {\n  return {\n    type: 'insert',\n    path,\n    position,\n    items,\n  }\n}\n\nexport function set(value: any, path: Path = []): SetPatch {\n  return {type: 'set', path, value}\n}\n\nexport function unset(path: Path = []): UnsetPatch {\n  return {type: 'unset', path}\n}\n\nexport function prefixPath<T extends {path: Path}>(patch: T, segment: PathSegment): T {\n  return {\n    ...patch,\n    path: [segment, ...patch.path],\n  }\n}\n","import {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {omitBy, isUndefined, get} from 'lodash'\nimport {\n  Editor,\n  MoveNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  InsertNodeOperation,\n  SplitNodeOperation,\n  RemoveNodeOperation,\n  MergeNodeOperation,\n  Descendant,\n} from 'slate'\nimport {set, insert, unset, diffMatchPatch, setIfMissing} from '../patch/PatchEvent'\nimport type {Patch, InsertPosition} from '../types/patch'\nimport {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {fromSlateValue} from './values'\nimport {debugWithName} from './debug'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(types: PortableTextMemberSchemaTypes): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: Editor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    debug('Operation', JSON.stringify(operation, null, 2))\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: Editor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child = (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child) ? child : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(editor: Editor, operation: SetNodeOperation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined\n      )\n      return [set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}])]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          Object.keys(operation.newProperties).forEach((keyName) => {\n            const val = get(operation.newProperties, keyName)\n            patches.push(set(val, [{_key: blockKey}, 'children', {_key: childKey}, keyName]))\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function insertNodePatch(\n    editor: Editor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[]\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert([fromSlateValue([operation.node], textBlockName)[0]], position, [\n            {_key: targetKey},\n          ]),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert([fromSlateValue([operation.node], textBlockName)[0]], 'before', [operation.path[0]]),\n      ]\n    } else if (operation.path.length === 2 && editor.children[operation.path[0]]) {\n      if (!editor.isTextBlock(block)) {\n        throw new Error('Invalid block')\n      }\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after'\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [operation.node as Descendant],\n          },\n        ],\n        textBlockName\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)} - ${JSON.stringify(\n        beforeValue\n      )}`\n    )\n  }\n\n  function splitNodePatch(\n    editor: Editor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0]\n        )} is not a text block and can't be split`\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName\n        )[0]\n        if (targetValue) {\n          patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2),\n              } as Descendant,\n            ],\n            textBlockName\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ])\n        )\n        patches.push(\n          set(splitSpan.text, [{_key: splitBlock._key}, 'children', {_key: splitSpan._key}, 'text'])\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: Editor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (operation.path.length === 2) {\n      const spanToRemove =\n        editor.isTextBlock(block) && block.children && block.children[operation.path[1]]\n      if (spanToRemove) {\n        return [unset([{_key: block._key}, 'children', {_key: spanToRemove._key}])]\n      }\n      // If it was not there before, do nothing\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function mergeNodePatch(\n    editor: Editor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    if (operation.path.length === 1) {\n      const block = beforeValue[operation.path[0]]\n      const targetKey = block && block._key\n      if (targetKey) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: targetKey}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (operation.path.length === 2) {\n      const block = beforeValue[operation.path[0]]\n      const mergedSpan =\n        (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n      const targetBlock = editor.children[operation.path[0]]\n      if (!editor.isTextBlock(targetBlock)) {\n        throw new Error('Invalid block')\n      }\n      const targetSpan = targetBlock.children[operation.path[1] - 1]\n      if (editor.isTextSpan(targetSpan)) {\n        // Set the merged span with it's new value\n        patches.push(\n          set(targetSpan.text, [{_key: block._key}, 'children', {_key: targetSpan._key}, 'text'])\n        )\n        if (mergedSpan) {\n          patches.push(unset([{_key: block._key}, 'children', {_key: mergedSpan._key}]))\n        }\n      }\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n    return patches\n  }\n\n  function moveNodePatch(editor: Editor, operation: MoveNodeOperation, beforeValue: Descendant[]) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition = operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [{_key: targetBlock._key}])\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n      const childToInsert = (fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock)\n        .children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ])\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Point, Path as SlatePath, Element} from 'slate'\nimport {isKeySegment, Path, PortableTextBlock} from '@sanity/types'\nimport {EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createKeyedPath(\n  point: Point,\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath) as Path\n}\n\nexport function createArrayedPath(point: EditorSelectionPoint, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => isKeySegment(point.path[0]) && n._key === point.path[0]._key,\n    })\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return blockPath\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) => isEqual([{_key: child._key}], childPath))\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {PortableTextBlock} from '@sanity/types'\nimport {BaseRange, Editor, Range} from 'slate'\nimport {EditorSelection, EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport function toPortableTextRange(\n  value: PortableTextBlock[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  return anchor && focus ? {anchor, focus} : null\n}\n\nexport function toSlateRange(selection: EditorSelection, editor: Editor): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n","import {Text, Range, Transforms, Editor, Element as SlateElement, Node} from 'slate'\nimport {\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SchemaType,\n} from '@sanity/types'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {DOMNode} from '@sanity/slate-react/dist/utils/dom'\nimport {\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {toSlateValue, fromSlateValue} from '../../utils/values'\nimport {toSlateRange, toPortableTextRange} from '../../utils/ranges'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withEditableAPI(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        // Make a selection if missing\n        if (!editor.selection) {\n          const point = {path: [0, 0], offset: 0}\n          Transforms.select(editor, {focus: point, anchor: point})\n          editor.onChange()\n        }\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          // Try/catch this, as Slate may error because the selection is currently wrong\n          // TODO: catch only relevant error from Slate\n          try {\n            const [block] = Array.from(\n              Editor.nodes(editor, {\n                at: editor.selection.focus,\n                match: (n) => Editor.isBlock(editor, n),\n              })\n            )[0] || [undefined]\n            if (block) {\n              return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0]\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          try {\n            const [node] = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: editor.selection.focus,\n                match: (n) => n._type !== undefined,\n                voids: true,\n              })\n            )[0] || [undefined]\n            if (node && !Editor.isBlock(editor, node)) {\n              const pseudoBlock: PortableTextBlock = {\n                _key: 'pseudo',\n                _type: types.block.name,\n                children: [node],\n              }\n              const blocks = fromSlateValue(\n                [pseudoBlock],\n                types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor)\n              )\n              if (editor.isTextBlock(blocks[0])) {\n                return blocks[0].children[0]\n              }\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus,\n            match: (n) => Editor.isBlock(editor, n),\n          })\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focus block')\n        }\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          throw new Error(\"Can't insert childs into block objects\")\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        Editor.insertNode(editor, child as Node)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as Node\n        Editor.insertNode(editor, block)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path\n      ): [PortableTextBlock | PortableTextChild | undefined, Path | undefined] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(editor, slatePath.focus.path.slice(0, 1))\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [fromSlateValue([block], types.block.name)[0], [{_key: block._key}]]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [ptChild, [{_key: block._key}, 'children', {_key: ptChild._key}]]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (element: PortableTextBlock | PortableTextChild): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || []\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch (err) {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch (err) {\n          return []\n        }\n      },\n      addAnnotation: (\n        type: ObjectSchemaType,\n        value?: {[prop: string]: unknown}\n      ): {spanPath: Path; markDefPath: Path} | undefined => {\n        const {selection} = editor\n        if (selection) {\n          const [block] = Editor.node(editor, selection.focus, {depth: 1})\n          if (SlateElement.isElement(block) && block._type === types.block.name) {\n            const annotationKey = keyGenerator()\n            if (editor.isTextBlock(block)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  markDefs: [\n                    ...(block.markDefs || []),\n                    {_type: type.name, _key: annotationKey, ...value} as PortableTextObject,\n                  ],\n                },\n                {at: selection.focus}\n              )\n              editor.onChange()\n              if (Range.isCollapsed(selection)) {\n                editor.pteExpandToWord()\n                editor.onChange()\n              }\n              const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n              if (editor.selection) {\n                Editor.withoutNormalizing(editor, () => {\n                  // Split if needed\n                  Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n                  if (editor.selection && Text.isText(textNode)) {\n                    Transforms.setNodes(\n                      editor,\n                      {\n                        marks: [...((textNode.marks || []) as string[]), annotationKey],\n                      },\n                      {\n                        at: editor.selection,\n                        match: (n) => n._type === types.span.name,\n                      }\n                    )\n                    editor.onChange()\n                  }\n                })\n                Editor.normalize(editor)\n                editor.onChange()\n                const newSelection = toPortableTextRange(\n                  fromSlateValue(\n                    editor.children,\n                    types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor)\n                  ),\n                  editor.selection,\n                  types\n                )\n                // eslint-disable-next-line max-depth\n                if (newSelection && typeof block._key === 'string') {\n                  // Insert an empty string to continue writing non-annotated text\n                  Editor.withoutNormalizing(editor, () => {\n                    if (editor.selection) {\n                      Transforms.insertNodes(\n                        editor,\n                        [{_type: 'span', text: '', marks: [], _key: keyGenerator()}],\n                        {\n                          at: Range.end(editor.selection),\n                        }\n                      )\n                      editor.onChange()\n                    }\n                  })\n                  return {\n                    spanPath: newSelection.focus.path,\n                    markDefPath: [{_key: block._key}, 'markDefs', {_key: annotationKey}],\n                  }\n                }\n              }\n            }\n          }\n        }\n        return undefined\n      },\n      delete: (selection: EditorSelection, options?: EditableAPIDeleteOptions): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            const nodes = Editor.nodes(editor, {\n              at: range,\n              match: (node) => {\n                if (options?.mode === 'blocks') {\n                  debug(`Deleting blocks touched by selection`)\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                }\n                debug(`Deleting children touched by selection`)\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n            const nodeAndPaths = [...nodes]\n            nodeAndPaths.forEach(([, p]) => {\n              Transforms.removeNodes(editor, {\n                at: p,\n                voids: true,\n                hanging: true,\n              })\n            })\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: ObjectSchemaType): void => {\n        let {selection} = editor\n        debug('Removing annotation', type)\n        if (selection) {\n          // Select the whole annotation if collapsed\n          if (Range.isCollapsed(selection)) {\n            const [node, nodePath] = Editor.node(editor, selection, {depth: 2})\n            if (Text.isText(node) && node.marks && typeof node.text === 'string') {\n              Transforms.select(editor, nodePath)\n              selection = editor.selection\n            }\n          }\n          // Do this without normalization or span references will be unstable!\n          Editor.withoutNormalizing(editor, () => {\n            if (selection && Range.isExpanded(selection)) {\n              selection = editor.selection\n              if (!selection) {\n                return\n              }\n              // Split the span first\n              Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n              editor.onChange()\n\n              // Everything in the selection which has marks\n              const spans = [\n                ...Editor.nodes(editor, {\n                  at: selection,\n                  match: (node) =>\n                    Text.isText(node) &&\n                    node.marks !== undefined &&\n                    Array.isArray(node.marks) &&\n                    node.marks.length > 0,\n                }),\n              ]\n              spans.forEach(([span, path]) => {\n                const [block] = Editor.node(editor, path, {depth: 1})\n                if (editor.isTextBlock(block)) {\n                  block.markDefs\n                    ?.filter((def) => def._type === type.name)\n                    .forEach((def) => {\n                      if (\n                        Text.isText(span) &&\n                        Array.isArray(span.marks) &&\n                        span.marks.includes(def._key)\n                      ) {\n                        const newMarks = [...(span.marks || []).filter((mark) => mark !== def._key)]\n                        Transforms.setNodes(\n                          editor,\n                          {\n                            marks: newMarks,\n                          },\n                          {at: path, voids: false, split: false}\n                        )\n                      }\n                    })\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n          editor.onChange()\n        }\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n      insertBreak: () => {\n        editor.insertBreak()\n        editor.onChange()\n      },\n    })\n    return editor\n  }\n}\n","import {PortableTextSlateEditor} from '../../types/editor'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(maxBlocks: number) {\n  return function withMaxBlocks(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      const rows = maxBlocks\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' || operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PRESERVE_KEYS: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withPreserveKeys(editor: Editor, fn: () => void): void {\n  PRESERVE_KEYS.set(editor, true)\n  fn()\n  PRESERVE_KEYS.set(editor, false)\n}\n\nexport function isPreservingKeys(editor: Editor): boolean | undefined {\n  return PRESERVE_KEYS.get(editor)\n}\n","import {Element, Transforms, Node, Editor} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {isPreservingKeys, PRESERVE_KEYS} from '../../utils/withPreserveKeys'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withKeys(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    PRESERVE_KEYS.set(editor, false)\n    const {apply, normalizeNode} = editor\n    editor.apply = (operation) => {\n      if (operation.type === 'split_node') {\n        operation.properties = {\n          ...operation.properties,\n          _key: keyGenerator(),\n        }\n      }\n      if (operation.type === 'insert_node') {\n        // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!\n        const withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node)\n        if (!Editor.isEditor(operation.node)) {\n          operation.node = {\n            ...operation.node,\n            ...(withNewKey ? {_key: keyGenerator()} : {}),\n          }\n        }\n      }\n      apply(operation)\n    }\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          Transforms.setNodes(editor, {_key: keyGenerator()}, {at: path})\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            Transforms.setNodes(editor, {_key: keyGenerator()}, {at: childPath})\n            return\n          }\n        }\n      }\n      // Do the original `normalizeNode` to enforce other constraints.\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","export const BEFORE = 'before'\nexport const AFTER = 'after'\n\nexport default function insert(array: any[], position: string, index: number, ...args: any[]) {\n  if (position !== BEFORE && position !== AFTER) {\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`)\n  }\n\n  const items = flatten(...args)\n\n  if (array.length === 0) {\n    return items\n  }\n\n  const len = array.length\n  const idx = Math.abs((len + index) % len) % len\n\n  const normalizedIdx = position === 'after' ? idx + 1 : idx\n\n  const copy = array.slice()\n  copy.splice(normalizedIdx, 0, ...flatten(items))\n  return copy\n}\n\nfunction flatten(...values: any[]) {\n  return values.reduce((prev, item) => prev.concat(item), [])\n}\n","import {PathSegment} from '@sanity/types'\nimport {findIndex} from 'lodash'\nimport applyPatch from './applyPatch'\nimport insert from './arrayInsert'\n\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty)\n\nfunction move(arr: any[], from: number, to: any) {\n  const nextValue = arr.slice()\n  const val = nextValue[from]\n  nextValue.splice(from, 1)\n  nextValue.splice(to, 0, val)\n  return nextValue\n}\n\nfunction findTargetIndex(array: any[], pathSegment: PathSegment) {\n  if (typeof pathSegment === 'number') {\n    return pathSegment\n  }\n  const index = findIndex(array, pathSegment)\n  return index === -1 ? false : index\n}\n\nexport default function apply(\n  value: any,\n  patch: {type: any; path: any; value: any; position: any; items: any}\n) {\n  const nextValue = value.slice() // make a copy for internal mutation\n\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'setIfMissing') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return value === undefined ? patch.value : value\n    } else if (patch.type === 'set') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'move') {\n      if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {\n        // eslint-disable-line max-depth\n        throw new Error(\n          `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n            patch.value\n          )}`\n        )\n      }\n      return move(nextValue, patch.value.from, patch.value.to)\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`)\n  }\n\n  const [head, ...tail] = patch.path\n\n  const index = findTargetIndex(value, head)\n\n  // If the given selector could not be found, return as-is\n  if (index === false) {\n    return nextValue\n  }\n\n  if (tail.length === 0) {\n    if (patch.type === 'insert') {\n      const {position, items} = patch\n      return insert(value, position, index, items)\n    } else if (patch.type === 'unset') {\n      if (typeof index !== 'number') {\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`)\n      }\n      nextValue.splice(index, 1)\n      return nextValue\n    }\n  }\n\n  // The patch is not directed to me\n  nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","import {omit, clone, isObject} from 'lodash'\nimport applyPatch from './applyPatch'\n\nexport default function apply(value: any, patch: {type: any; path: any; value: any}) {\n  const nextValue = clone(value)\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'set') {\n      if (!isObject(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an object to a non-object')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'setIfMissing') {\n      // console.log('IS IT missing?', value)\n      return value === undefined ? patch.value : value\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`)\n  }\n\n  // The patch is not directed to me\n  const [head, ...tail] = patch.path\n  if (typeof head !== 'string') {\n    throw new Error(`Expected field name to be a string, instad got: ${head}`)\n  }\n\n  if (tail.length === 0 && patch.type === 'unset') {\n    return omit(nextValue, head)\n  }\n\n  nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","const OPERATIONS: Record<string, any> = {\n  replace(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: any, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(_currentValue: any, _nextValue: any) {\n    return undefined\n  },\n  inc(currentValue: any, nextValue: any) {\n    return currentValue + nextValue\n  },\n  dec(currentValue: any, nextValue: any) {\n    return currentValue - nextValue\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(value: any, patch: any) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path\n        .map((path: any) => JSON.stringify(path))\n        .join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  return OPERATIONS[patch.type](value, patch.value)\n}\n","import * as DMP from 'diff-match-patch'\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\ntype fn = (oldVal: any, newVal: any) => any\nconst OPERATIONS: Record<string, fn> = {\n  replace(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: undefined, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(currentValue: any, nextValue: any) {\n    return undefined\n  },\n  diffMatchPatch(currentValue: string, nextValue: string) {\n    return dmp.patch_apply(dmp.patch_fromText(nextValue), currentValue)[0]\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(\n  value: string,\n  patch: {type: string; path: any[]; value: any}\n): string {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path.join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  const func = OPERATIONS[patch.type]\n  if (func) {\n    return func(value, patch.value)\n  }\n  throw new Error('Unknown patch type')\n}\n","import {isObject, isString} from 'lodash'\nimport applyArrayPatch from './array'\nimport applyObjectPatch from './object'\nimport applyPrimitivePatch from './primitive'\nimport applyStringPatch from './string'\n\nexport function applyAll(value: any, patches: any[]) {\n  return patches.reduce(_apply, value)\n}\n\nfunction applyPatch(value: string, patch: {type: string; path: any[]; value: any}) {\n  if (Array.isArray(value)) {\n    return applyArrayPatch(value, patch as any)\n  }\n  if (isString(value)) {\n    return applyStringPatch(value, patch)\n  }\n  if (isObject(value)) {\n    return applyObjectPatch(value, patch)\n  }\n  return applyPrimitivePatch(value, patch)\n}\n\nexport default function _apply(value: string, patch: {type: string; path: any[]; value: any}) {\n  const res = applyPatch(value, patch)\n  // console.log('applyPatch(%o, %o) : %o (noop? %o)', value, patch, res, value === res)\n  return res\n}\n","/* eslint-disable max-statements */\nimport {Editor, Transforms, Element, Path as SlatePath, Descendant, Text, Node} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport {Path, KeyedSegment, PathSegment, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {Patch, InsertPatch, UnsetPatch, SetPatch, DiffMatchPatch} from '../types/patch'\nimport {applyAll} from '../patch/applyPatch'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {toSlateValue} from './values'\nimport {debugWithName} from './debug'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('operationToPatches')\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function createPatchToOperations(\n  schemaTypes: PortableTextMemberSchemaTypes\n): (\n  editor: Editor,\n  patch: Patch,\n  patches: Patch[],\n  snapshot: PortableTextBlock[] | undefined\n) => boolean {\n  function diffMatchPatch(editor: Editor, patch: DiffMatchPatch) {\n    const blockKey = findLastKey([patch.path[0]])\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return blockKey ? node._key === blockKey : indx === patch.path[0]\n    })\n    const block = editor.children[blockIndex] as Element\n    const parsed = dmp.patch_fromText(patch.value)[0]\n    if (parsed && editor.isTextBlock(block)) {\n      const childKey = findLastKey([patch.path[2]])\n      const childIndex = block.children.findIndex((node, indx) => {\n        return childKey ? node._key === childKey : indx === patch.path[0]\n      })\n      const slatePath = [blockIndex, childIndex]\n      const distance = parsed.length2 - parsed.length1\n      const point = {\n        path: slatePath,\n        offset:\n          distance >= 0\n            ? (parsed.start1 || 0) + parsed.diffs[0][1].length\n            : (parsed.start2 || 0) + parsed.length2 - distance,\n      }\n      // debug(\n      //   `DiffMatchPatch (${distance < 0 ? 'remove' : 'insert'}) at ${JSON.stringify(slatePath)}}: `,\n      //   JSON.stringify(point, null, 2),\n      //   JSON.stringify(parsed, null, 2)\n      // )\n      debugState(editor, 'before')\n\n      let text\n      if (parsed.diffs[1]) {\n        text = parsed.diffs[1][1]\n      } else {\n        text = parsed.diffs[0][1]\n      }\n      debug(`Text: '${text}'`)\n      if (distance >= 0) {\n        editor.apply({\n          type: 'insert_text',\n          path: point.path,\n          offset: point.offset,\n          text,\n        })\n      } else {\n        editor.apply({\n          type: 'remove_text',\n          path: point.path,\n          offset: point.offset - text.length,\n          text,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    return false\n  }\n\n  function insertPatch(editor: Editor, patch: InsertPatch) {\n    // Insert blocks\n    if (patch.path.length === 1) {\n      const {items, position} = patch\n      const blocksToInsert = toSlateValue(\n        items as PortableTextBlock[],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      ) as Descendant[]\n      const posKey = findLastKey(patch.path)\n      const index = Math.max(\n        0,\n        editor.children.findIndex((node, indx) => {\n          return posKey ? node._key === posKey : indx === patch.path[0]\n        })\n      )\n      const normalizedIdx = position === 'after' ? index + 1 : index\n      debug(`Inserting blocks at path [${normalizedIdx}]`)\n      debugState(editor, 'before')\n      Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n      debugState(editor, 'after')\n      return true\n    }\n    const {items, position} = patch\n    const posKey = findLastKey(patch.path)\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return posKey ? node._key === posKey : indx === patch.path[0]\n    })\n\n    // Insert children\n    const block: Descendant | undefined =\n      editor.children && blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex = editor.isTextBlock(block)\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    const childrenToInsert =\n      block &&\n      toSlateValue(\n        [{...block, children: items as PortableTextChild[]}],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      )\n\n    const normalizedIdx = position === 'after' ? childIndex + 1 : childIndex\n    const targetPath = [blockIndex, normalizedIdx]\n    debug(`Inserting children at path ${targetPath}`)\n    debugState(editor, 'before')\n    if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n      Transforms.insertNodes(editor, childrenToInsert[0].children, {at: targetPath})\n    }\n    debugState(editor, 'after')\n    return true\n  }\n\n  function setPatch(editor: Editor, patch: SetPatch) {\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n    debug('blockIndex', blockIndex)\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex = editor.isTextBlock(block)\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    let value = patch.value\n    const targetPath: SlatePath = childIndex > -1 ? [blockIndex, childIndex] : [blockIndex]\n    if (typeof patch.path[3] === 'string') {\n      value = {}\n      value[patch.path[3]] = patch.value\n    }\n    const isTextBlock = editor.isTextBlock(block)\n    if (isTextBlock) {\n      debug(`Setting nodes at ${JSON.stringify(patch.path)} - ${JSON.stringify(targetPath)}`)\n      debug('Value to set', JSON.stringify(value, null, 2))\n      debugState(editor, 'before')\n      if (targetPath.length === 1) {\n        debug('Setting block property')\n        const {children, ...nextRest} = value as PortableTextBlock\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {children: prevChildren, ...prevRest} = block || {children: undefined}\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {...prevRest},\n          newProperties: nextRest,\n        })\n        if (block && Element.isElement(block)) {\n          block.children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'remove_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n        if (Array.isArray(children)) {\n          children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'insert_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n      } else if (Text.isText(value)) {\n        debug('Setting text property')\n        const prevSel = editor.selection && {...editor.selection}\n        editor.apply({\n          type: 'remove_text',\n          path: targetPath,\n          offset: 0,\n          text: block.children[childIndex].text as string,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: targetPath,\n          offset: 0,\n          text: value.text,\n        })\n        const onSamePath = prevSel && isEqual(prevSel.focus.path, targetPath)\n        // const onSameText =\n        //   editor.selection &&\n        //   editor.selection.focus.path[0] === blockIndex &&\n        //   patch.path[3] === 'text'\n        if (onSamePath) {\n          debug('On same path, restoring previous selection')\n          Transforms.select(editor, prevSel)\n        }\n        //  else if (onSameText) {\n        //   debug('Adjusting for inserted text')\n        //   const newOffset = typeof patch.value === 'string' ? patch.value.length : 0\n        //   const point = {path: targetPath, offset: newOffset}\n        //   Transforms.select(editor, {focus: point, anchor: point})\n        // }\n      } else {\n        debug('Setting non-text property')\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {},\n          newProperties: value as Partial<Node>,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    // If this is a object block, just set the whole block\n    else if (block && 'value' in block) {\n      const newVal = applyAll([block.value], [patch])[0]\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  function unsetPatch(editor: Editor, patch: UnsetPatch, previousPatch?: Patch) {\n    // Value\n    if (patch.path.length === 0) {\n      debug(`Removing everything`)\n      debugState(editor, 'before')\n      Transforms.deselect(editor)\n      editor.children.forEach((c, i) => {\n        Transforms.removeNodes(editor, {at: [i]})\n      })\n      debugState(editor, 'after')\n      return true\n    }\n    // Single blocks\n    if (patch.path.length === 1) {\n      const lastKey = findLastKey(patch.path)\n      const index = editor.children.findIndex((node, indx) =>\n        lastKey ? node._key === lastKey : indx === patch.path[0]\n      )\n      if (index === -1) {\n        debug(`Could not find block to unset at path ${JSON.stringify(patch.path)}`)\n        return false\n      }\n      debug(`Removing block at path [${index}]`)\n      debugState(editor, 'before')\n      if (\n        editor.selection &&\n        editor.selection.focus.path[0] === index &&\n        editor.children[index - 1]\n      ) {\n        const point = {path: [Math.max(editor.selection.focus.path[0] - 1, 0)], offset: 0}\n        Transforms.select(editor, {focus: point, anchor: point})\n        Transforms.move(editor, {unit: 'line'})\n      }\n      Transforms.removeNodes(editor, {at: [index]})\n      debugState(editor, 'after')\n      return true\n    }\n\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n\n    // Unset on text block children\n    if (editor.isTextBlock(block) && patch.path[1] === 'children' && patch.path.length === 3) {\n      const childIndex = block.children.findIndex((node: PortableTextChild, indx: number) => {\n        return isKeyedSegment(patch.path[2])\n          ? node._key === patch.path[2]._key\n          : indx === patch.path[2]\n      })\n      const targetPath = [blockIndex, childIndex]\n      const prevSel = editor.selection && {...editor.selection}\n      const onSamePath = isEqual(editor.selection?.focus.path, targetPath)\n      if (childIndex === -1) {\n        debug(`Could not find child to unset at path ${JSON.stringify(targetPath)}`)\n        return false\n      }\n      debug(`Unsetting child at path ${JSON.stringify(targetPath)}`)\n      debugState(editor, 'before')\n      if (prevSel && onSamePath && editor.isTextBlock(block)) {\n        const needToAdjust = childIndex >= prevSel.focus.path[1]\n        if (needToAdjust) {\n          const textChild = block.children[childIndex]\n          const isMergeUnset =\n            previousPatch?.type === 'set' &&\n            previousPatch.path[3] === 'text' &&\n            typeof previousPatch.value === 'string' &&\n            editor.isTextSpan(textChild) &&\n            isEqual(\n              previousPatch.value.slice(-textChild.text.length),\n              block.children[childIndex].text\n            )\n          if (isMergeUnset) {\n            const mergedChild = block.children[Math.max(childIndex - 1, 0)]\n            debug('Adjusting selection for merging of nodes')\n            prevSel.focus = {...prevSel.focus}\n            prevSel.focus.path = [targetPath[0], Math.max(targetPath[1] - 1, 0)]\n            prevSel.focus.offset = editor.isTextSpan(mergedChild)\n              ? mergedChild.text.length - textChild.text.length + prevSel.focus.offset\n              : 0\n            prevSel.anchor = prevSel.focus\n            Transforms.select(editor, prevSel)\n            Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n            debugState(editor, 'after')\n            return true\n          }\n        }\n      }\n      Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n      debugState(editor, 'after')\n      return true\n    }\n    // Inside block objects - patch block and set it again\n    if (!editor.isTextBlock(block)) {\n      const newBlock = applyAll([block], [patch])[0]\n      Transforms.setNodes(editor, newBlock, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  let previousPatch: Patch | undefined\n\n  return function (editor: Editor, patch: Patch): boolean {\n    let changed = false\n    debug('\\n\\nNEW PATCH =============================================================')\n    debug(JSON.stringify(patch, null, 2))\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch, previousPatch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n    previousPatch = patch\n    return changed\n  }\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\n// Helper function to find the last part of a patch path that has a known key\nfunction findLastKey(path: Path): string | null {\n  let key: string | null = null\n\n  path\n    .concat('')\n    .reverse()\n    .forEach((part) => {\n      if (isKeyedSegment(part)) {\n        key = part._key\n      }\n    })\n\n  return key\n}\n\nfunction debugState(editor: Editor, stateName: string) {\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n","import {EMPTY, Observable, OperatorFunction, defer, of, switchMap, tap} from 'rxjs'\n\nexport function bufferUntil<T>(\n  emitWhen: (currentBuffer: T[]) => boolean\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      let buffer: T[] = [] // custom buffer\n      return source.pipe(\n        tap((v) => buffer.push(v)), // add values to buffer\n        switchMap(() => (emitWhen(buffer) ? of(buffer) : EMPTY)), // emit the buffer when the condition is met\n        tap(() => (buffer = [])) // clear the buffer\n      )\n    })\n}\n","/* eslint-disable complexity */\n/* eslint-disable no-eq-null */\n/* eslint-disable max-depth */\n/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport {isEqual, flatten} from 'lodash'\nimport {\n  Editor,\n  Element as SlateElement,\n  Operation,\n  Path,\n  SplitNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SelectionOperation,\n} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport type {Patch} from '../../types/patch'\nimport {PatchObservable, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {isPatching} from '../../utils/withoutPatching'\n\nconst debug = debugWithName('plugin:withUndoRedo')\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst MERGING = new WeakMap<Editor, boolean | undefined>()\nconst UNDO_STEP_LIMIT = 300\n\nconst isMerging = (editor: Editor): boolean | undefined => {\n  return MERGING.get(editor)\n}\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  if (!isPatching(editor)) {\n    return false\n  }\n  return SAVING.get(editor)\n}\n\nexport interface Options {\n  patches$?: PatchObservable\n  readOnly: boolean\n}\n\nexport function createWithUndoRedo(\n  options: Options\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {readOnly, patches$} = options\n  const remotePatches: {patch: Patch; time: Date}[] = []\n  return (editor: PortableTextSlateEditor) => {\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches')\n        const sub = patches$.subscribe(({patches}) => {\n          patches.forEach((patch) => {\n            if (patch.origin !== 'local') {\n              remotePatches.push({patch: patch, time: new Date()})\n            }\n          })\n        })\n        return () => {\n          debug('Unsubscribing to patches')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    // Apply function for merging and saving local history inspired from 'slate-history' by Ian Storm Taylor\n    editor.apply = (op: Operation) => {\n      if (readOnly) {\n        apply(op)\n        return\n      }\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp = step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      let save = isSaving(editor)\n      let merge = isMerging(editor)\n\n      if (save == null) {\n        save = shouldSave(op, lastOp)\n      }\n\n      if (save) {\n        if (merge == null) {\n          if (step == null) {\n            merge = false\n            // eslint-disable-next-line no-negated-condition\n          } else if (operations.length !== 0) {\n            merge = true\n          } else {\n            merge = shouldMerge(op, lastOp) || overwrite\n          }\n        }\n\n        if (step && merge) {\n          if (overwrite) {\n            step.operations.pop()\n          }\n          step.operations.push(op)\n        } else {\n          const stp = {\n            operations: [...(editor.selection === null ? [] : [createSelectOperation(editor)]), op],\n            timestamp: new Date(),\n          }\n          undos.push(stp)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = [...remotePatches.filter((item) => item.time >= step.timestamp)]\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n            )\n          })\n          withoutSaving(editor, () => {\n            Editor.withoutNormalizing(editor, () => {\n              transformedOperations\n                .map(Operation.inverse)\n                .reverse()\n                .forEach((op) => {\n                  // Try this as the document could be changed from the outside,\n                  // and sometimes we can't perform the undo operation on the current doc.\n                  try {\n                    editor.apply(op)\n                  } catch (err) {\n                    debug('Could not perform undo step', err)\n                    editor.history.redos.push(step)\n                    editor.history.undos.pop()\n                  }\n                })\n            })\n          })\n        }\n        editor.history.redos.push(step)\n        editor.history.undos.pop()\n        editor.onChange()\n      }\n    }\n\n    editor.redo = () => {\n      if (readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time > step.timestamp)\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n            )\n          })\n          withoutSaving(editor, () => {\n            Editor.withoutNormalizing(editor, () => {\n              transformedOperations.forEach((op) => {\n                try {\n                  editor.apply(op)\n                } catch (err) {\n                  debug('Could not perform redo step', err)\n                  editor.history.undos.push(step)\n                  editor.history.redos.pop()\n                }\n              })\n            })\n          })\n        }\n        editor.history.undos.push(step)\n        editor.history.redos.pop()\n        editor.onChange()\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n// This will adjust the user selection according to patcehes done by others.\n// TODO: complete all necessary steps of the algorithm and write tests.\n\n// eslint-disable-next-line max-statements\nfunction transformOperation(editor: Editor, patch: Patch, operation: Operation): Operation[] {\n  // debug(`Rebasing selection for patch ${patch.type} against operation ${operation.type}`)\n\n  let transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, patch.items.length)]\n  }\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, -1)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(`Adjusting selection for unset everything patch and ${operation.type} operation`)\n    return [operation]\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const blockIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n    const block = editor.children[blockIndex]\n    if (SlateElement.isElement(block) && Array.isArray(block.children)) {\n      const childIndex = block.children.findIndex((child) =>\n        isEqual({_key: child._key}, patch.path[2])\n      )\n      const parsed = dmp.patch_fromText(patch.value)[0]\n      if (!parsed) {\n        debug('Could not parse diffMatchPatch', patch)\n        return [operation]\n      }\n      const distance = parsed.length2 - parsed.length1\n      const patchIsRemovingText = parsed.diffs.some((diff) => diff[0] === -1)\n\n      if (operation.type === 'split_node' && operation.path.length > 1) {\n        const splitOperation = transformedOperation as SplitNodeOperation\n        if (patchIsRemovingText) {\n          splitOperation.position -= distance\n        } else {\n          splitOperation.position += distance\n        }\n        return [splitOperation]\n      }\n\n      if (\n        (operation.type === 'insert_text' || operation.type === 'remove_text') &&\n        Path.isPath(operation.path) &&\n        operation.path[0] !== undefined &&\n        operation.path[0] === blockIndex &&\n        operation.path[1] === childIndex\n      ) {\n        if (operation.type === 'insert_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === 1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const insertTextOperation = transformedOperation as InsertTextOperation\n            insertTextOperation.offset += distance\n            transformedOperation = insertTextOperation\n          }\n          // TODO: deal with overlapping ranges\n          return [transformedOperation]\n        }\n\n        if (operation.type === 'remove_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === -1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const removeTextOperation = transformedOperation as RemoveTextOperation\n            removeTextOperation.offset -= distance\n            transformedOperation = removeTextOperation\n          }\n          return [transformedOperation]\n        }\n      }\n      // // Selection operations with diffPatchMatch\n      // if (operation.type === 'set_selection') {\n      //   const newProperties = transformedOperation.newProperties\n      //   if (newProperties && patchIsRemovingText) {\n      //     newProperties.offset = newProperties.offset - distance\n      //   } else if (newProperties) {\n      //     newProperties.offset = newProperties.offset + distance\n      //   }\n      //   return [newProperties ? {...transformedOperation, newProperties} : transformedOperation]\n      // }\n    }\n    // TODO: transform this?\n    // if (operation.type === 'set_selection' && patch.type !== 'diffMatchPatch') {\n    //   console.log('set_selection other', JSON.stringify(patch))\n    // }\n  }\n  return [operation]\n}\n\nfunction adjustBlockPath(\n  editor: Editor,\n  patch: Patch,\n  operation: Operation,\n  level: number\n): Operation {\n  const myIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n  if (\n    myIndex >= 0 &&\n    operation.type !== 'set_selection' &&\n    Array.isArray(operation.path) &&\n    operation.path[0] !== undefined &&\n    operation.path[0] >= myIndex + level\n  ) {\n    const transformedOperation = {...operation}\n    const newPath = [operation.path[0] + level, ...operation.path.slice(1)]\n    debug(`Adjusting ${operation.type} for block ${patch.type}`, operation.path, newPath)\n    transformedOperation.path = newPath\n    return transformedOperation\n  }\n  return operation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection' && op.newProperties === null) {\n    return false\n  }\n\n  return true\n}\n\nconst shouldOverwrite = (op: Operation, prev: Operation | undefined): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n","/* eslint-disable max-nested-callbacks */\nimport {Subject, concatMap, tap} from 'rxjs'\nimport {\n  Descendant,\n  Editor,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n} from 'slate'\nimport {insert, setIfMissing, unset} from '../../patch/PatchEvent'\nimport type {Patch} from '../../types/patch'\n\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  EditorChange,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {PATCHING, isPatching, withoutPatching} from '../../utils/withoutPatching'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {createPatchToOperations} from '../../utils/patchToOperations'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {bufferUntil} from '../../utils/bufferUntil'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n}\n\ninterface Options {\n  change$: Subject<EditorChange>\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  patches$?: PatchObservable\n  patchFunctions: PatchFunctions\n  readOnly: boolean\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\nexport function createWithPatches({\n  change$,\n  isPending,\n  patches$,\n  patchFunctions,\n  readOnly,\n  schemaTypes,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const patchToOperations = createPatchToOperations(schemaTypes)\n  return function withPatches(editor: PortableTextSlateEditor) {\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches$')\n        const sub = patches$\n          .pipe(\n            tap(({patches}) => {\n              if (patches.every((p) => p.origin === 'local')) {\n                isPending.current = false\n              }\n            }),\n            bufferUntil(() => !isPending.current),\n            concatMap((incoming) => {\n              return incoming\n            })\n          )\n          .subscribe(({patches, snapshot}) => {\n            const remotePatches = patches.filter((p) => p.origin !== 'local')\n            if (remotePatches.length !== 0) {\n              debug('Remote patches', patches)\n              Editor.withoutNormalizing(editor, () => {\n                remotePatches.forEach((patch) => {\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                  withoutPatching(editor, () => {\n                    withoutSaving(editor, () => {\n                      withPreserveKeys(editor, () => {\n                        try {\n                          patchToOperations(editor, patch, patches, snapshot)\n                        } catch (err) {\n                          debug('Got error trying to create operations from patch')\n                          console.error(err)\n                        }\n                      })\n                    })\n                  })\n                })\n              })\n            }\n          })\n        return () => {\n          debug('Unsubscribing to patches$')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.apply = (operation: Operation): void | Editor => {\n      if (readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        debug(`Editor is not producing patch for operation ${operation.type}`, operation)\n        return editor\n      }\n\n      // If the editor was empty and now got a value, create the PT-array and insert the placeholder into it.\n      if (editorWasEmpty && !editorIsEmpty) {\n        patches.push(unset([])) // Clear the value first or we may risk dupes from the below insert.\n        patches.push(setIfMissing([], []))\n        previousChildren.forEach((c, index) => {\n          patches.push(insert(fromSlateValue([c], schemaTypes.block.name), 'before', [index]))\n        })\n      }\n      // Unset the value if something was setting a node in a way that emptied the editor.\n      if (editorIsEmpty && ['set_node'].includes(operation.type)) {\n        patches.push(unset([]))\n      }\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_selection':\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if the operation made the editor empty\n      if (editorIsEmpty && ['remove_text', 'remove_node'].includes(operation.type)) {\n        patches = [...patches, unset([])]\n        change$.next({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor)\n          ),\n        })\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          change$.next({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Transforms, Descendant} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock({\n  schemaTypes,\n  keyGenerator,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.createPlaceholderBlock = (): Descendant => {\n      return {\n        _type: schemaTypes.block.name,\n        _key: keyGenerator(),\n        style: schemaTypes.styles[0].value || 'normal',\n        markDefs: [],\n        children: [\n          {\n            _type: 'span',\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          },\n        ],\n      }\n    }\n    const {onChange} = editor\n    // Make sure there's a placeholder block present if the editor's children become empty\n    editor.onChange = () => {\n      const hadSelection = !!editor.selection\n      onChange()\n      if (editor.children.length === 0) {\n        debug('Inserting placeholder block')\n        Transforms.deselect(editor)\n        // Set the value directly without using transforms as we don't want this to be producing any patches\n        editor.children = [editor.createPlaceholderBlock()]\n        if (hadSelection) {\n          Transforms.select(editor, {\n            focus: {path: [0, 0], offset: 0},\n            anchor: {path: [0, 0], offset: 0},\n          })\n        }\n        editor.onChange()\n      }\n    }\n    return editor\n  }\n}\n","import {Subject} from 'rxjs'\nimport {Editor, Transforms, Element, Path, Text as SlateText, Node} from 'slate'\nimport {\n  EditorChange,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  types: PortableTextMemberSchemaTypes,\n  change$: Subject<EditorChange>\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      const [, path] = nodeEntry\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            Transforms.setNodes(editor, {style: defaultStyle}, {at: [op.path[0] + 1], voids: false})\n            break\n          }\n        }\n      }\n    }\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(editor, {...node, style: defaultStyle} as Partial<Node>, {\n            at: path,\n          })\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path}\n          )\n        }\n      })\n      // Emit a new selection here (though it might be the same).\n      // Toolbars and similar on the outside may rely on selection changes to update themselves.\n      change$.next({\n        type: 'selection',\n        selection: toPortableTextRange(\n          fromSlateValue(editor.children, types.block.name),\n          editor.selection,\n          types\n        ),\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Transforms, Element, Text, Node} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(types: PortableTextMemberSchemaTypes) {\n  return function withPortableTextLists(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path}\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path}\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          } else {\n            level++\n            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path}\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isListBlock(node) && node.listItem === listStyle,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","/* eslint-disable complexity */\n/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isEqual, flatten, uniq} from 'lodash'\nimport {Editor, Range, Transforms, Text, Path, NodeEntry, Element} from 'slate'\n\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  types: PortableTextMemberSchemaTypes\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      if (\n        editor.operations.some((op) =>\n          [\n            'insert_node',\n            'insert_text',\n            'merge_node',\n            'remove_node',\n            'remove_text',\n            'set_node',\n          ].includes(op.type)\n        )\n      ) {\n        mergeSpans(editor)\n      }\n      const [node, path] = nodeEntry\n      const isSpan = Text.isText(node) && node._type === types.span.name\n      const isTextBlock = editor.isTextBlock(node)\n      if (isSpan || isTextBlock) {\n        if (!isTextBlock && !Array.isArray(node.marks)) {\n          debug('Adding .marks to span node')\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n          editor.onChange()\n        }\n        for (const op of editor.operations) {\n          // Make sure markDefs are copied over when merging two blocks.\n          if (\n            op.type === 'merge_node' &&\n            op.path.length === 1 &&\n            'markDefs' in op.properties &&\n            op.properties._type === types.block.name &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] - 1 >= 0\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n            debug(`Copying markDefs over to merged block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n              const isNormalized = isEqual(newMarkDefs, targetBlock.markDefs)\n              // eslint-disable-next-line max-depth\n              if (!isNormalized) {\n                Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: targetPath, voids: false})\n                editor.onChange()\n              }\n            }\n          }\n          // Make sure markDefs are copied over to new block when splitting a block.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            Element.isElementProps(op.properties) &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] + 1])\n            debug(`Copying markDefs over to split block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              Transforms.setNodes(\n                editor,\n                {markDefs: uniq([...oldDefs, ...op.properties.markDefs])},\n                {at: targetPath, voids: false}\n              )\n              editor.onChange()\n            }\n          }\n          // Make sure marks are reset, if a block is split at the end.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 2 &&\n            op.properties._type === types.span.name &&\n            'marks' in op.properties &&\n            Array.isArray(op.properties.marks) &&\n            op.properties.marks.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [child, childPath] = Editor.node(editor, [op.path[0] + 1, 0])\n            if (\n              Text.isText(child) &&\n              child.text === '' &&\n              Array.isArray(child.marks) &&\n              child.marks.length > 0\n            ) {\n              Transforms.setNodes(editor, {marks: []}, {at: childPath, voids: false})\n              editor.onChange()\n            }\n          }\n          // Make sure markDefs are reset, if a block is split at start.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0\n          ) {\n            const [block, blockPath] = Editor.node(editor, [op.path[0]])\n            if (\n              editor.isTextBlock(block) &&\n              block.children.length === 1 &&\n              block.markDefs &&\n              block.markDefs.length > 0 &&\n              Text.isText(block.children[0]) &&\n              block.children[0].text === '' &&\n              (!block.children[0].marks || block.children[0].marks.length === 0)\n            ) {\n              Transforms.setNodes(editor, {markDefs: []}, {at: blockPath})\n              editor.onChange()\n            }\n          }\n        }\n        // Empty marks if text is empty\n        if (isSpan && Array.isArray(node.marks) && node.marks.length > 0 && node.text === '') {\n          Transforms.setNodes(editor, {marks: []}, {at: path, voids: false})\n          editor.onChange()\n        }\n      }\n      // Check consistency of markDefs\n      if (\n        isTextBlock &&\n        editor.operations.some((op) =>\n          ['split_node', 'remove_node', 'remove_text', 'merge_node'].includes(op.type)\n        )\n      ) {\n        normalizeMarkDefs(editor)\n      }\n    }\n\n    // Special hook before inserting text at the end of an annotation.\n    editor.apply = (op) => {\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        if (\n          selection &&\n          Range.isCollapsed(selection) &&\n          Editor.marks(editor)?.marks?.some((mark) => !decorators.includes(mark))\n        ) {\n          const [node] = Array.from(\n            Editor.nodes(editor, {\n              mode: 'lowest',\n              at: selection.focus,\n              match: (n) => n._type === types.span.name,\n              voids: false,\n            })\n          )[0] || [undefined]\n          if (\n            Text.isText(node) &&\n            node.text.length === selection.focus.offset &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0\n          ) {\n            apply(op)\n            Transforms.splitNodes(editor, {\n              match: Text.isText,\n              at: {...selection.focus, offset: selection.focus.offset},\n            })\n            const marksWithoutAnnotationMarks: string[] = (\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            ).filter((mark) => decorators.includes(mark))\n            Transforms.setNodes(\n              editor,\n              {marks: marksWithoutAnnotationMarks},\n              {at: Path.next(selection.focus.path)}\n            )\n            return\n          }\n        }\n      }\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          // Split if needed\n          Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n          // Use new selection\n          const splitTextNodes = [\n            ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n          ]\n          const shouldRemoveMark = flatten(\n            splitTextNodes.map((item) => item[0]).map((node) => node.marks)\n          ).includes(mark)\n          if (shouldRemoveMark) {\n            editor.removeMark(mark)\n            return\n          }\n          Editor.withoutNormalizing(editor, () => {\n            splitTextNodes.forEach(([node, path]) => {\n              const marks = [\n                ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark\n                ),\n                mark,\n              ]\n              Transforms.setNodes(\n                editor,\n                {marks},\n                {at: path, match: Text.isText, split: true, hanging: true}\n              )\n            })\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: [...existingMarks, mark],\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                        (eMark: string) => eMark !== mark\n                      ),\n                    },\n                    {at: path}\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: existingMarks.filter((eMark) => eMark !== mark),\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return false\n      }\n      let existingMarks =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      if (Range.isExpanded(editor.selection)) {\n        Array.from(Editor.nodes(editor, {match: Text.isText, at: editor.selection})).forEach(\n          (n) => {\n            const [node] = n as NodeEntry<Text>\n            existingMarks = uniq([...existingMarks, ...((node.marks as string[]) || [])])\n          }\n        )\n      }\n      return existingMarks.includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n      editor.onChange()\n    }\n    return editor\n  }\n\n  /**\n   * Normalize re-marked spans in selection\n   */\n  function mergeSpans(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      for (const [node, path] of Array.from(\n        Editor.nodes(editor, {\n          at: Editor.range(editor, [selection.anchor.path[0]], [selection.focus.path[0]]),\n        })\n      ).reverse()) {\n        const [parent] = path.length > 1 ? Editor.node(editor, Path.parent(path)) : [undefined]\n        const nextPath = [path[0], path[1] + 1]\n        if (Editor.isBlock(editor, parent)) {\n          const nextNode = parent.children[nextPath[1]]\n          if (Text.isText(node) && Text.isText(nextNode) && isEqual(nextNode.marks, node.marks)) {\n            debug('Merging spans')\n            Transforms.mergeNodes(editor, {at: nextPath, voids: true})\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Normalize markDefs\n   *\n   */\n  function normalizeMarkDefs(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      const blocks = Editor.nodes(editor, {\n        at: selection,\n        match: (n) => n._type === types.block.name,\n      })\n      for (const [block, path] of blocks) {\n        if (editor.isTextBlock(block)) {\n          const newMarkDefs = (block.markDefs || []).filter((def) => {\n            return block.children.find((child) => {\n              return (\n                Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)\n              )\n            })\n          })\n          if (!isEqual(newMarkDefs, block.markDefs)) {\n            debug('Removing markDef not in use')\n            Transforms.setNodes(\n              editor,\n              {\n                markDefs: newMarkDefs,\n              },\n              {at: path}\n            )\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n}\n","import {Subject} from 'rxjs'\nimport {\n  EditorChange,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  change$: Subject<EditorChange>,\n  types: PortableTextMemberSchemaTypes\n) {\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          ptRange = existing\n        } else {\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n      }\n      debug(`Emitting selection ${JSON.stringify(ptRange || null)}`)\n      if (ptRange) {\n        change$.next({type: 'selection', selection: ptRange})\n      } else {\n        change$.next({type: 'selection', selection: null})\n      }\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {Element, Operation, InsertNodeOperation, Text as SlateText} from 'slate'\nimport {\n  isPortableTextTextBlock,\n  PortableTextTextBlock,\n  isPortableTextSpan,\n  PortableTextSpan,\n  PortableTextListBlock,\n  isPortableTextListBlock,\n} from '@sanity/types'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes(types: PortableTextMemberSchemaTypes) {\n  return function withSchemaTypes(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isPortableTextTextBlock(value) && value._type === types.block.name\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type == types.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isPortableTextListBlock(value) && value._type === types.block.name\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        types.block.name !== element._type &&\n        (types.blockObjects.map((obj) => obj.name).includes(element._type) ||\n          types.inlineObjects.map((obj) => obj.name).includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = types.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n    // Extend Slate's default normalization to add _type span to span inserted after a inline void object\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      const isInsertTextWithoutType =\n        op.type === 'insert_node' &&\n        op.path.length === 2 &&\n        SlateText.isText(op.node) &&\n        op.node._type === undefined\n      if (isInsertTextWithoutType) {\n        const insertNodeOperation = op as InsertNodeOperation\n        const newNode: SlateText = {\n          ...(insertNodeOperation.node as SlateText),\n          _type: 'span',\n        }\n        op.node = newNode\n        debug('Setting span type to child without a type', op)\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Transforms, Text} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({schemaTypes, keyGenerator}: Options) {\n  return function withUtils(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0\n        const whiteSpaceAfterIndex = charsAfter.split('').findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1)\n        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n    return editor\n  }\n}\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport {Editor, Transforms, Path, Range} from 'slate'\nimport isHotkey from 'is-hotkey'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  const createEmptyBlock = () =>\n    toSlateValue(\n      [\n        {\n          _type: types.block.name,\n          _key: keyGenerator(),\n          style: 'normal',\n          markDefs: [],\n          children: [\n            {\n              _type: 'span',\n              _key: keyGenerator(),\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ],\n      portableTextEditor\n    )[0]\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isBackspace = isHotkey('backspace', event.nativeEvent)\n      const isDelete = isHotkey('delete', event.nativeEvent)\n\n      // Disallow deleting void blocks by backspace from another line.\n      // Otherwise it's so easy to delete the void block above when trying to delete text on\n      // the line below or above\n      if (\n        isBackspace &&\n        editor.selection &&\n        editor.selection.focus.path[0] > 0 &&\n        Range.isCollapsed(editor.selection)\n      ) {\n        const [prevBlock, prevPath] = Editor.node(\n          editor,\n          Path.previous(editor.selection.focus.path.slice(0, 1))\n        )\n        const [focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          prevBlock &&\n          focusBlock &&\n          Editor.isVoid(editor, prevBlock) &&\n          editor.selection.focus.offset === 0\n        ) {\n          debug('Preventing deleting void block above')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, prevPath)\n          editor.onChange()\n          return\n        }\n      }\n      if (\n        isDelete &&\n        editor.selection &&\n        editor.selection.focus.offset === 0 &&\n        Range.isCollapsed(editor.selection) &&\n        editor.children[editor.selection.focus.path[0] + 1]\n      ) {\n        const [nextBlock] = Editor.node(editor, Path.next(editor.selection.focus.path.slice(0, 1)))\n        const [focusBlock, focusBlockPath] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          nextBlock &&\n          focusBlock &&\n          !Editor.isVoid(editor, focusBlock) &&\n          Editor.isVoid(editor, nextBlock)\n        ) {\n          debug('Preventing deleting void block below')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, focusBlockPath)\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {depth: 2})\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m)\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        let focusBlock\n        try {\n          ;[focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        } catch (err) {\n          // Just ignore\n        }\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n\n        // Enter from another style than the first (default one)\n        if (\n          editor.isTextBlock(focusBlock) &&\n          focusBlock.style &&\n          focusBlock.style !== types.styles[0].value\n        ) {\n          const [, end] = Range.edges(editor.selection)\n          const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n          if (endAtEndOfNode) {\n            Editor.insertNode(editor, createEmptyBlock())\n            event.preventDefault()\n            return\n          }\n        }\n        // Block object enter key\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Editor.insertNode(editor, createEmptyBlock())\n          event.preventDefault()\n          return\n        }\n      }\n\n      // Soft line breaks\n      if (isShiftEnter) {\n        event.preventDefault()\n        editor.insertText('\\n')\n        return\n      }\n\n      // Undo/redo\n      if (isHotkey('mod+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.undo()\n        return\n      }\n      if (isHotkey('mod+y', event.nativeEvent) || isHotkey('mod+shift+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.redo()\n      }\n    }\n    return editor\n  }\n}\n","import {PortableTextBlock, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {flatten, isObject, uniq} from 'lodash'\nimport {set, unset, insert} from '../patch/PatchEvent'\nimport {InvalidValueResolution, PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n): {valid: boolean; resolution: InvalidValueResolution | null} {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)]\n  const validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description: 'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n      },\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key) {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n          }\n          return true\n        }\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every child in text block is valid\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has children\n        if (!textBlock.children) {\n          resolution = {\n            patches: [unset([{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' is missing required key 'children'.`,\n            action: 'Remove the block',\n            item: textBlock,\n          }\n          return true\n        }\n        // Test that markDefs exists\n        if (!blk.markDefs) {\n          resolution = {\n            patches: [set({...textBlock, markDefs: []}, [{_key: textBlock._key}])],\n            description: `Block is missing required key 'markDefs'.`,\n            action: 'Add empty markDefs array',\n            item: textBlock,\n          }\n          return true\n        }\n        // NOTE: this is commented out as we want to allow the saved data to have optional .marks for spans (as specified by the schema)\n        // const spansWithUndefinedMarks = blk.children\n        //   .filter(cld => cld._type === types.span.name)\n        //   .filter(cld => typeof cld.marks === 'undefined')\n\n        // if (spansWithUndefinedMarks.length > 0) {\n        //   const first = spansWithUndefinedMarks[0]\n        //   resolution = {\n        //     patches: [\n        //       set({...first, marks: []}, [{_key: blk._key}, 'children', {_key: first._key}])\n        //     ],\n        //     description: `Span has no .marks array`,\n        //     action: 'Add empty marks array',\n        //     item: first\n        //   }\n        //   return true\n        // }\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || [])\n          ) as string[]\n        )\n        // Note: this is commented out as it may be a bit too strict:\n        // // Test that all markDefs are in use\n        // if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        //   const unusedMarkDefs: string[] = uniq(\n        //     blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key))\n        //   )\n        //   if (unusedMarkDefs.length > 0) {\n        //     resolution = {\n        //       patches: unusedMarkDefs.map((key) =>\n        //         unset([{_key: blk._key}, 'markDefs', {_key: key}])\n        //       ),\n        //       description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n        //         ', '\n        //       )}.`,\n        //       action: 'Remove unused mark definition item',\n        //       item: blk,\n        //     }\n        //     return true\n        //   }\n        // }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark)\n        )\n        const orphanedMarks = annotationMarks.filter((mark) =>\n          textBlock.markDefs ? !textBlock.markDefs.find((def) => def._key === mark) : false\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark))\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            resolution = {\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks']\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphanedMarks.join(\n                ', '\n              )}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n            }\n            return true\n          }\n        }\n\n        // Test that children is lengthy\n        if (textBlock.children && textBlock.children.length === 0) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n          }\n          resolution = {\n            patches: [insert([newSpan], 'after', [{_key: blk._key}, 'children', 0])],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n          }\n          return true\n        }\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!child._key) {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                patches: [set(newChild, [{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that children have valid types\n            if (!child._type || validChildTypes.includes(child._type) === false) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that spans have .text\n            if (child._type === types.span.name && child.text === undefined) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing text property!`,\n                action: `Write an empty .text to the object`,\n                item: blk,\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution}\n}\n","import {Node, Transforms, Editor, Descendant, Range} from 'slate'\nimport {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {\n  EditorChanges,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {validateValue} from '../../utils/validateValue'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  change$: EditorChanges,\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withInsertData(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach((zw) => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      })\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData('application/x-portable-text-event-origin', originEvent || 'external')\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            keyGenerator,\n            spanTypeName\n          )\n          // Validate the result\n          const validation = validateValue(parsed, schemaTypes, keyGenerator)\n          // Bail out if it's not valid\n          if (!validation.valid) {\n            const errorDescription = `${validation.resolution?.description}`\n            change$.next({\n              type: 'error',\n              level: 'warning',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          mixMarkDefs(editor, slateValue)\n          editor.insertFragment(slateValue)\n          editor.onChange()\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      change$.next({type: 'loading', isLoading: true}) // This could potentially take some time\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>'\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(portableText, schemaTypes, keyGenerator)\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          change$.next({\n            type: 'error',\n            level: 'warning',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`)\n        mixMarkDefs(editor, fragment)\n        editor.insertFragment(fragment)\n        editor.onChange()\n        change$.next({type: 'loading', isLoading: false})\n        return true\n      }\n      change$.next({type: 'loading', isLoading: false})\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\nfunction regenerateKeys(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        if (editor.isTextBlock(newNode)) {\n          newNode.children = newNode.children.map((child) =>\n            child._type === spanTypeName && editor.isTextSpan(child)\n              ? {\n                  ...child,\n                  marks:\n                    child.marks && child.marks.includes(oldKey)\n                      ? // eslint-disable-next-line max-nested-callbacks\n                        [...child.marks].filter((mark) => mark !== oldKey).concat(newKey)\n                      : child.marks,\n                }\n              : child\n          )\n        }\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\nfunction mixMarkDefs(editor: PortableTextSlateEditor, fragment: any) {\n  if (!editor.selection) {\n    return false\n  }\n  const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {depth: 1})\n  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n    const {markDefs} = focusBlock\n    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs)\n    // As the first block will be inserted into another block (potentially), mix those markDefs\n    Transforms.setNodes(\n      editor,\n      {\n        markDefs: [...(fragment[0].markDefs || []), ...(markDefs || [])],\n      },\n      {at: focusPath, mode: 'lowest', voids: false}\n    )\n    return true\n  }\n  return false\n}\n","import {BaseOperation, Editor, NodeEntry, Node} from 'slate'\nimport {noop} from 'lodash'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<PortableTextSlateEditor, OriginalEditorFunctions>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions\n): {editor: PortableTextSlateEditor; subscribe: () => () => void} => {\n  const e = editor as T & PortableTextSlateEditor\n  const {keyGenerator, portableTextEditor, patches$, readOnly, maxBlocks, isPending} = options\n  const {schemaTypes, change$} = portableTextEditor\n  e.subscriptions = []\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(schemaTypes, keyGenerator)\n  const withSchemaTypes = createWithSchemaTypes(schemaTypes)\n  const withEditableAPI = createWithEditableAPI(portableTextEditor, schemaTypes, keyGenerator)\n  const withPatches = createWithPatches({\n    change$,\n    isPending,\n    keyGenerator,\n    patches$,\n    patchFunctions: operationToPatches,\n    readOnly,\n    schemaTypes,\n  })\n  const withMaxBlocks = createWithMaxBlocks(maxBlocks || -1)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({readOnly, patches$})\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(schemaTypes)\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(schemaTypes, change$)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock({\n    keyGenerator,\n    schemaTypes,\n  })\n\n  const withUtils = createWithUtils({keyGenerator, schemaTypes})\n  const withPortableTextSelections = createWithPortableTextSelections(change$, schemaTypes)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.onChange = originalFunctions.onChange\n    e.apply = originalFunctions.apply\n    e.normalizeNode = originalFunctions.normalizeNode\n  }\n  if (readOnly) {\n    return {\n      editor: withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withUtils(\n                withPlaceholderBlock(\n                  withPortableTextLists(withPortableTextSelections(withEditableAPI(e)))\n                )\n              )\n            )\n          )\n        )\n      ),\n      subscribe: () => noop,\n    }\n  }\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return {\n    editor: withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(withEditableAPI(e))))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    ),\n    subscribe: () => {\n      const unsubscribes: (() => void)[] = []\n      editor.subscriptions.forEach((subscribeFn) => {\n        unsubscribes.push(subscribeFn())\n      })\n      return () => {\n        unsubscribes.forEach((unsubscribeFn) => {\n          unsubscribeFn()\n        })\n      }\n    },\n  }\n}\n","import React, {PropsWithChildren, useEffect, useMemo} from 'react'\nimport {Slate, withReact} from '@sanity/slate-react'\nimport {createEditor} from 'slate'\nimport {PortableTextBlock} from '@sanity/types'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {debugWithName} from '../../utils/debug'\nimport {PatchObservable} from '../../types/editor'\nimport {toSlateValue} from '../../utils/values'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {withPlugins} from '../plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\n/**\n * @internal\n */\nexport interface SlateContainerProps extends PropsWithChildren {\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  maxBlocks: number | undefined\n  patches$?: PatchObservable\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n  value: PortableTextBlock[] | undefined\n}\n\n/**\n * Sets up and encapsulates the Slate instance\n * @internal\n */\nexport function SlateContainer(props: SlateContainerProps) {\n  const {patches$, portableTextEditor, readOnly, maxBlocks, keyGenerator, value, isPending} = props\n\n  // Create the slate instance\n  const [slateEditor, subscribe] = useMemo(() => {\n    debug('Creating new Slate editor instance')\n    const {editor, subscribe: _sub} = withPlugins(withReact(createEditor()), {\n      isPending,\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n    KEY_TO_VALUE_ELEMENT.set(editor, {})\n    KEY_TO_SLATE_ELEMENT.set(editor, {})\n    return [editor, _sub]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial - empty deps here\n\n  useEffect(() => {\n    const unsubscribe = subscribe()\n    return () => {\n      unsubscribe()\n    }\n  }, [subscribe])\n\n  // Update the slate instance when plugin dependent props change.\n  useEffect(() => {\n    debug('Re-initializing plugin chain')\n    withPlugins(slateEditor, {\n      isPending,\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n  }, [keyGenerator, portableTextEditor, maxBlocks, readOnly, patches$, slateEditor, isPending])\n\n  const initialValue = useMemo(\n    () =>\n      value\n        ? toSlateValue(value, {schemaTypes: portableTextEditor.schemaTypes}, KEY_TO_SLATE_ELEMENT)\n        : [slateEditor.createPlaceholderBlock()],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [] // Only initial\n  )\n\n  useEffect(() => {\n    return () => {\n      debug('Destroying Slate editor')\n      slateEditor.destroy()\n    }\n  }, [slateEditor])\n\n  return (\n    <Slate editor={slateEditor} value={initialValue}>\n      {props.children}\n    </Slate>\n  )\n}\n","/**\n * Debounce time for flushing local patches (ms since user haven't produced a patch)\n * (lower time for tests to speed them up)\n */\nexport const FLUSH_PATCHES_DEBOUNCE_MS = process.env.NODE_ENV === 'test' ? 100 : 1000\n","import {createContext, useContext} from 'react'\nimport {EditorSelection} from '../../types/editor'\n\n/**\n * A React context for sharing the editor selection.\n */\nexport const PortableTextEditorSelectionContext = createContext<EditorSelection | null>(null)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return selection\n}\n","import {createContext, useContext} from 'react'\n\nimport {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext = createContext<PortableTextEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n\n  return editor\n}\n","import {PortableTextBlock} from '@sanity/types'\nimport {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor value.\n */\nexport const PortableTextEditorValueContext = createContext<PortableTextBlock[] | undefined>(\n  undefined\n)\n\n/**\n * Get the current editor value from the React context.\n */\nexport const usePortableTextEditorValue = () => {\n  return useContext(PortableTextEditorValueContext)\n}\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return readOnly\n}\n","/* eslint-disable max-nested-callbacks */\nimport React, {useMemo, useRef} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {KEY_TO_SLATE_ELEMENT} from '../../utils/weakMaps'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutPatching} from '../../utils/withoutPatching'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  editor: PortableTextEditor\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  readOnly: boolean\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Syncs a value with the editor state.\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps\n): (value: PortableTextBlock[] | undefined, userCallbackFn?: () => void) => void {\n  const {editor, slateEditor, isPending, readOnly} = props\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  return useMemo(\n    () => (value: PortableTextBlock[] | undefined, userCallbackFn?: () => void) => {\n      const callbackFn = () => {\n        slateEditor.onChange()\n        if (userCallbackFn) {\n          userCallbackFn()\n        }\n      }\n\n      // Don't sync the value if there are pending local changes.\n      // The value will be synced again after the local changes are submitted.\n      if (isPending.current && !readOnly) {\n        debug('Has local patches')\n        return\n      }\n\n      if (previousValue.current === value) {\n        debug('Value is the same object')\n        return\n      }\n\n      previousValue.current = value\n\n      // If empty value, create a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        withoutSaving(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            Editor.withoutNormalizing(slateEditor, () => {\n              const len = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [len - 1 - index],\n                })\n              })\n              Transforms.insertNodes(slateEditor, slateEditor.createPlaceholderBlock(), {at: [0]})\n            })\n            Editor.normalize(slateEditor)\n          })\n        })\n        callbackFn()\n        return\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(\n          value,\n          {\n            schemaTypes: editor.schemaTypes,\n          },\n          KEY_TO_SLATE_ELEMENT.get(slateEditor)\n        )\n        withoutSaving(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            Editor.withoutNormalizing(slateEditor, () => {\n              const childrenLength = slateEditor.children.length\n              if (slateValueFromProps.length < childrenLength) {\n                Array.from(Array(childrenLength - slateValueFromProps.length)).forEach(\n                  (_, index) => {\n                    const bIndex = childrenLength - 1 - index\n                    if (bIndex > 0) {\n                      Transforms.removeNodes(slateEditor, {\n                        at: [bIndex],\n                      })\n                    }\n                  }\n                )\n              }\n              slateValueFromProps.forEach((c, i) => {\n                const oldBlock = slateEditor.children[i]\n                if (oldBlock && !isEqual(c, oldBlock)) {\n                  debug('Replacing changed block', oldBlock)\n                  const currentSel = slateEditor.selection\n                  Transforms.deselect(slateEditor)\n                  Transforms.removeNodes(slateEditor, {at: [i]})\n                  withPreserveKeys(slateEditor, () => {\n                    Transforms.insertNodes(slateEditor, c, {at: [i]})\n                  })\n                  if (currentSel) {\n                    Transforms.select(slateEditor, currentSel)\n                  }\n                }\n                if (!oldBlock) {\n                  debug('Adding new block', c)\n                  withPreserveKeys(slateEditor, () => {\n                    Transforms.insertNodes(slateEditor, c, {at: [i]})\n                  })\n                }\n              })\n            })\n          })\n        })\n      }\n      callbackFn()\n    },\n    [editor, isPending, readOnly, slateEditor]\n  )\n}\n","import React, {\n  PropsWithChildren,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {debounce} from 'lodash'\nimport {useSlate} from '@sanity/slate-react'\nimport {EditorChange, EditorChanges, EditorSelection} from '../../types/editor'\nimport {Patch} from '../../types/patch'\nimport {FLUSH_PATCHES_DEBOUNCE_MS} from '../../constants'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {PortableTextEditorSelectionContext} from '../hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorContext} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditorValueContext} from '../hooks/usePortableTextEditorValue'\nimport {PortableTextEditorReadOnlyContext} from '../hooks/usePortableTextReadOnly'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport {PortableTextEditorKeyGeneratorContext} from '../hooks/usePortableTextEditorKeyGenerator'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps extends PropsWithChildren {\n  change$: EditorChanges\n  editor: PortableTextEditor\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  readOnly: boolean\n  value: PortableTextBlock[] | undefined\n}\n\n/**\n * Synchronizes the server value and provides contexts with the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {change$, editor, isPending, onChange, keyGenerator, readOnly, value} = props\n  const [selection, setSelection] = useState<EditorSelection>(null)\n  const pendingPatches = useRef<Patch[]>([])\n  const slateEditor = useSlate()\n\n  const syncValue = useSyncValue({\n    editor,\n    keyGenerator,\n    isPending,\n    readOnly,\n    slateEditor,\n  })\n\n  useEffect(() => {\n    startTransition(() => {\n      debug('Value from props changed, syncing new value')\n      syncValue(value)\n    })\n    change$.next({type: 'value', value})\n  }, [syncValue, change$, value])\n\n  const onFlushPendingPatches = useCallback(() => {\n    const finalPatches = [...pendingPatches.current]\n    debug('Flushing pending patches', finalPatches)\n    if (finalPatches.length > 0) {\n      pendingPatches.current = pendingPatches.current.splice(\n        finalPatches.length,\n        pendingPatches.current.length\n      )\n      onChange({type: 'mutation', patches: finalPatches})\n    }\n  }, [onChange])\n\n  // Debounced version of flush pending patches\n  const onFlushPendingPatchesDebounced = useMemo(\n    () =>\n      debounce(onFlushPendingPatches, FLUSH_PATCHES_DEBOUNCE_MS, {\n        leading: false,\n        trailing: true,\n      }),\n    [onFlushPendingPatches]\n  )\n\n  // Flush pending patches on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'patch':\n          isPending.current = true\n          pendingPatches.current.push(next.patch)\n          onChange(next)\n          onFlushPendingPatchesDebounced()\n          break\n        case 'selection':\n          // Set the selection state in a transition, we don't need the state immediately.\n          startTransition(() => {\n            debug('Setting selection')\n            setSelection(next.selection)\n          })\n          onChange(next) // Keep this out of the startTransition!\n          break\n        default:\n          onChange(next)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, onFlushPendingPatchesDebounced, onChange, syncValue, isPending])\n  return (\n    <PortableTextEditorKeyGeneratorContext.Provider value={keyGenerator}>\n      <PortableTextEditorContext.Provider value={editor}>\n        <PortableTextEditorValueContext.Provider value={value}>\n          <PortableTextEditorReadOnlyContext.Provider value={readOnly}>\n            <PortableTextEditorSelectionContext.Provider value={selection}>\n              {props.children}\n            </PortableTextEditorSelectionContext.Provider>\n          </PortableTextEditorReadOnlyContext.Provider>\n        </PortableTextEditorValueContext.Provider>\n      </PortableTextEditorContext.Provider>\n    </PortableTextEditorKeyGeneratorContext.Provider>\n  )\n}\n","import React, {PropsWithChildren, useEffect, useRef, useState} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {debugWithName} from '../../utils/debug'\nimport {InvalidValueResolution} from '../../types/editor'\nimport {validateValue} from '../../utils/validateValue'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:Validator')\n\n/**\n * @internal\n */\nexport interface ValidatorProps extends PropsWithChildren {\n  keyGenerator: () => string\n  portableTextEditor: PortableTextEditor\n  value: PortableTextBlock[] | undefined\n}\n\n/**\n * Validates a new PortableText value\n *\n * @internal\n */\nexport function Validator(props: ValidatorProps) {\n  const {portableTextEditor, keyGenerator, value} = props\n  const {change$, schemaTypes} = portableTextEditor\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const [invalidValueResolution, setInvalidValueResolution] =\n    useState<InvalidValueResolution | null>(null)\n\n  useEffect(() => {\n    const hasNewBlock =\n      value && previousValue.current && value.length > previousValue.current.length\n    const isNewValue = !previousValue.current && value\n    if (isNewValue || hasNewBlock) {\n      debug('Validating')\n      change$.next({type: 'loading', isLoading: true})\n      const validation = validateValue(value, schemaTypes, keyGenerator)\n      change$.next({type: 'loading', isLoading: false})\n      if (value && !validation.valid) {\n        change$.next({\n          type: 'invalidValue',\n          resolution: validation.resolution,\n          value: value,\n        })\n        setInvalidValueResolution(validation.resolution)\n      }\n    }\n    previousValue.current = value\n  }, [keyGenerator, change$, schemaTypes, value])\n  if (invalidValueResolution) {\n    return <>{invalidValueResolution.description}</>\n  }\n  return <>{props.children}</>\n}\n","import React, {PropsWithChildren, createRef} from 'react'\nimport {\n  ArrayDefinition,\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {Subject} from 'rxjs'\nimport {compileType} from '../utils/schema'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {defaultKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {SlateContainer} from './components/SlateContainer'\nimport {Synchronizer} from './components/Synchronizer'\nimport {Validator} from './components/Validator'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps = PropsWithChildren<{\n  /**\n   * Function that gets called when the editor changes the value\n   */\n  onChange: (change: EditorChange) => void\n\n  /**\n   * Schema type for the portable text field\n   */\n  schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n  /**\n   * Maximum number of blocks to allow within the editor\n   */\n  maxBlocks?: number | string\n\n  /**\n   * Whether or not the editor should be in read-only mode\n   */\n  readOnly?: boolean\n\n  /**\n   * The current value of the portable text field\n   */\n  value?: PortableTextBlock[]\n\n  /**\n   * Function used to generate keys for array items (`_key`)\n   */\n  keyGenerator?: () => string\n\n  /**\n   * Observable of local and remote patches for the edited value.\n   */\n  patches$?: PatchObservable\n\n  /**\n   * Backward compatibility (renamed to patches$).\n   */\n  incomingPatches$?: PatchObservable\n}>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends React.Component<PortableTextEditorProps> {\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor API (currently implemented with Slate).\n   */\n  private editable?: EditableAPI\n  /**\n   * This reference tracks if we are in a pending local edit state. If local changes are unsettled (patches yet not submitted),\n   * we use it to make sure we don't handle any new props.value or remote patches that can interfere with the user's typing.\n   */\n  private isPending: React.MutableRefObject<boolean | null>\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (!props.schemaType) {\n      throw new Error('PortableTextEditor: missing \"type\" property')\n    }\n\n    if (props.incomingPatches$) {\n      console.warn(`The prop 'incomingPatches$' is deprecated and renamed to 'patches$'`)\n    }\n\n    this.change$.next({type: 'loading', isLoading: true})\n\n    this.isPending = createRef()\n    this.isPending.current = false\n\n    this.schemaTypes = getPortableTextMemberSchemaTypes(\n      props.schemaType.hasOwnProperty('jsonType') ? props.schemaType : compileType(props.schemaType)\n    )\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (this.props.schemaType !== prevProps.schemaType) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType)\n      )\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n    this.change$.next({type: 'loading', isLoading: false})\n    this.change$.next({type: 'ready'})\n    this.change$.next({type: 'value', value: this.props.value})\n  }\n\n  render() {\n    const {onChange, value, children, patches$, incomingPatches$} = this.props\n    const {change$, isPending} = this\n    const _patches$ = incomingPatches$ || patches$ // Backward compatibility\n\n    const maxBlocks =\n      typeof this.props.maxBlocks === 'undefined'\n        ? undefined\n        : parseInt(this.props.maxBlocks.toString(), 10) || undefined\n\n    const readOnly = Boolean(this.props.readOnly)\n    const keyGenerator = this.props.keyGenerator || defaultKeyGenerator\n    return (\n      <Validator portableTextEditor={this} keyGenerator={keyGenerator} value={value}>\n        <SlateContainer\n          keyGenerator={keyGenerator}\n          maxBlocks={maxBlocks}\n          patches$={_patches$}\n          portableTextEditor={this}\n          readOnly={readOnly}\n          value={value}\n          isPending={isPending}\n        >\n          <Synchronizer\n            change$={change$}\n            editor={this}\n            isPending={isPending}\n            keyGenerator={keyGenerator}\n            onChange={onChange}\n            readOnly={readOnly}\n            value={value}\n          >\n            {children}\n          </Synchronizer>\n        </SlateContainer>\n      </Validator>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (editor: PortableTextEditor): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): {spanPath: Path; markDefPath: Path} | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild\n  ) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (editor: PortableTextEditor): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: SpanSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: BlockSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (editor: PortableTextEditor, selection: EditorSelection | null) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (editor: PortableTextEditor, type: ObjectSchemaType) =>\n    editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n}\n","import {isEqual} from 'lodash'\nimport type {Patch} from '../types/patch'\n\n/**\n * Try to compact a set of patches\n *\n */\nexport function compactPatches(patches: Patch[]) {\n  // If the last patch is unsetting everything, just do that\n  const lastPatch = patches.slice(-1)[0]\n  if (lastPatch && lastPatch.type === 'unset' && lastPatch.path.length === 0) {\n    return [lastPatch]\n  }\n  let finalPatches = patches\n  // Run through the patches and remove any redundant ones.\n  finalPatches = finalPatches.filter((patch, index) => {\n    if (!patch) {\n      return false\n    }\n    const nextPatch = finalPatches[index + 1]\n    if (\n      nextPatch &&\n      nextPatch.type === 'set' &&\n      patch.type === 'set' &&\n      isEqual(patch.path, nextPatch.path)\n    ) {\n      return false\n    }\n    return true\n  })\n  if (finalPatches.length !== patches.length) {\n    return finalPatches\n  }\n  return patches\n}\n","import {isEqual} from 'lodash'\nimport {Path, PortableTextBlock} from '@sanity/types'\nimport {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[]\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find((blk) => blk._key === blockKey)\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (!block.children || (Array.isArray(block.children) && block.children.length === 0)) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (anchor && value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus}\n  }\n  return null\n}\n","import {PortableTextObject} from '@sanity/types'\nimport React, {useCallback} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: React.ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  // eslint-disable-next-line no-alert\n  const handleClick = useCallback(() => alert(JSON.stringify(props.annotation)), [props.annotation])\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n","import React, {ReactElement, useRef, useMemo, useCallback} from 'react'\nimport {Element as SlateElement, Transforms, Editor, Text} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_ELEMENT_RANGE,\n  IS_DRAGGING_CHILD_ELEMENT,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableChild')\ndeclare global {\n  interface Document {\n    // TypeScript removed this function from the default types (2021-08-26)\n    caretPositionFromPoint?(x: number, y: number): {offsetNode: Node; offset: number}\n  }\n}\n\n/**\n * @internal\n */\nexport interface DraggableChildProps {\n  children: ReactElement\n  element: Text | SlateElement\n  readOnly: boolean\n}\n\n/**\n * Implements drag and drop functionality on editor child nodes\n * @internal\n */\nexport const DraggableChild = ({children, element, readOnly}: DraggableChildProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      const isMyDragOver = IS_DRAGGING_CHILD_ELEMENT.get(editor)\n      if (!isMyDragOver) {\n        return\n      }\n      debug('handle drag over')\n      event.preventDefault() // Needed to get the dropEffect showing\n      event.dataTransfer.dropEffect = 'move'\n      // Find the range where the drop happened\n      const range = ReactEditor.findEventRange(editor, event)\n      if (range) {\n        IS_DRAGGING_ELEMENT_RANGE.set(editor, range)\n        Transforms.select(editor, range)\n      }\n    },\n    [editor]\n  )\n\n  // Note: this is called for the dragging child\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_CHILD_ELEMENT.set(editor, element)\n      if (isVoid) {\n        event.dataTransfer.effectAllowed = 'move'\n        // Specify dragImage so that single elements in the preview will not be the drag image,\n        // but always the whole block preview itself.\n        // Also clone it so that it will not be visually clipped by scroll-containers etc.\n        const elm = event.currentTarget\n        if (elm instanceof HTMLElement) {\n          const dragGhost = elm.cloneNode(true) as HTMLElement\n          dragGhostRef.current = dragGhost\n          dragGhost.style.width = `${elm.clientWidth}px`\n          dragGhost.style.height = `${elm.clientHeight}px`\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.top = '-99999px'\n          dragGhost.style.left = '-99999px'\n          if (document.body) {\n            document.body.appendChild(dragGhost)\n            const rect = elm.getBoundingClientRect()\n            const x = event.clientX - rect.left\n            const y = event.clientY - rect.top\n            dragGhost.style.width = `${rect.width}px`\n            dragGhost.style.height = `${rect.height}px`\n            event.dataTransfer.setDragImage(dragGhost, x, y)\n          }\n        }\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  if (readOnly) {\n    return children\n  }\n\n  return (\n    <span draggable={isVoid} onDragStart={handleDragStart} onDragOver={handleDragOver}>\n      {children}\n    </span>\n  )\n}\n","import React, {ReactElement} from 'react'\nimport {Range, Text} from 'slate'\nimport {RenderLeafProps, useSelected, useSlateStatic} from '@sanity/slate-react'\nimport {uniq} from 'lodash'\nimport {PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {\n  RenderChildFunction,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {DraggableChild} from './DraggableChild'\n\nconst debug = debugWithName('components:Leaf')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  children: ReactElement\n  keyGenerator: () => string\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const {attributes, children, leaf, schemaTypes, keyGenerator, renderChild, readOnly} = props\n  const spanRef = React.useRef(null)\n  let returnedChildren = children\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  // Render text nodes\n  if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n    const block = children.props.parent as PortableTextTextBlock | undefined\n    const path = block ? [{_key: block._key}, 'children', {_key: leaf._key}] : []\n    const decoratorValues = schemaTypes.decorators.map((dec) => dec.value)\n    const marks: string[] = uniq(\n      (Array.isArray(leaf.marks) ? leaf.marks : []).filter((mark) => decoratorValues.includes(mark))\n    )\n    marks.forEach((mark) => {\n      const type = schemaTypes.decorators.find((dec) => dec.value === mark)\n      if (type && props.renderDecorator) {\n        returnedChildren = props.renderDecorator({\n          children: returnedChildren,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          selected,\n          type,\n          value: mark,\n        })\n      }\n    })\n    const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : []\n    const annotations = annotationMarks\n      .map(\n        (mark) =>\n          !decoratorValues.includes(mark) &&\n          block &&\n          block.markDefs &&\n          block.markDefs.find((def) => def._key === mark)\n      )\n      .filter(Boolean) as PortableTextObject[]\n\n    if (block && annotations.length > 0) {\n      annotations.forEach((annotation) => {\n        const type = schemaTypes.annotations.find((t) => t.name === annotation._type)\n        if (type) {\n          if (props.renderAnnotation) {\n            returnedChildren = (\n              <span ref={spanRef}>\n                {props.renderAnnotation({\n                  block,\n                  children: returnedChildren,\n                  editorElementRef: spanRef,\n                  focused,\n                  path,\n                  selected,\n                  type,\n                  value: annotation,\n                })}\n              </span>\n            )\n          } else {\n            returnedChildren = (\n              <DefaultAnnotation annotation={annotation}>\n                <span ref={spanRef}>{returnedChildren}</span>\n              </DefaultAnnotation>\n            )\n          }\n        }\n      })\n    }\n    if (block && renderChild) {\n      const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n      if (child) {\n        const defaultRendered = <>{returnedChildren}</>\n        returnedChildren = renderChild({\n          annotations,\n          children: defaultRendered,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          schemaType: schemaTypes.span,\n          selected,\n          value: child,\n        })\n      }\n    }\n  }\n  if (debugRenders) {\n    debug(`Render ${leaf._key} (span)`)\n  }\n  const key = leaf._key || keyGenerator()\n\n  return (\n    <span key={key} {...attributes} ref={spanRef}>\n      <DraggableChild element={leaf} readOnly={readOnly}>\n        {returnedChildren}\n      </DraggableChild>\n    </span>\n  )\n}\n","import {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport React from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nexport default DefaultObject\n","import styled from 'styled-components'\n\nexport const DefaultBlockObject = styled.div`\n  user-select: none;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span`\n  background: #999;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import React, {useState, useRef, useMemo, useCallback, DragEvent, useEffect} from 'react'\nimport {Element as SlateElement, Transforms, Path, Editor} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING_ELEMENT_TARGET,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: React.ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({children, element, readOnly, blockRef}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n  const isInline = useMemo(() => Editor.isInline(editor, element), [editor, element])\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () => setBlockElement(blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element)),\n    [editor, element, blockRef]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath\n          )} (${dragPosition})`\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element]\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element]\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]')\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid]\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    []\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n","/* eslint-disable complexity */\n/* eslint-disable max-statements */\nimport React, {ReactElement, FunctionComponent, useRef, useMemo} from 'react'\nimport {Element as SlateElement, Editor, Range} from 'slate'\nimport {Path, PortableTextChild, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {useSelected, useSlateStatic, ReactEditor, RenderElementProps} from '@sanity/slate-react'\nimport {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {fromSlateValue} from '../../utils/values'\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {DefaultBlockObject, DefaultListItem, DefaultListItemInner} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\nimport {DraggableChild} from './DraggableChild'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  const value = useMemo(\n    () => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0],\n    [editor, element, schemaTypes.block.name]\n  )\n\n  let renderedBlock = children\n\n  let className\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type)\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [{_key: block._key}, 'children', {_key: element._key}]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <DraggableChild element={element} readOnly={readOnly}>\n            <span\n              className=\"pt-inline-object\"\n              ref={inlineBlockObjectRef}\n              key={element._key}\n              style={inlineBlockStyle}\n              contentEditable={false}\n            >\n              {renderChild &&\n                renderChild({\n                  annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                  children: <ObjectNode value={value} />,\n                  value: value as PortableTextChild,\n                  schemaType,\n                  focused,\n                  selected,\n                  path: elmPath,\n                  editorElementRef: inlineBlockObjectRef,\n                })}\n              {!renderChild && <ObjectNode value={value} />}\n            </span>\n          </DraggableChild>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style)\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        type: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item) => item.value === element.listItem)\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          type: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: BlockRenderProps = {\n      children: renderedBlock,\n      editorElementRef: blockRef,\n      focused,\n      level,\n      listItem: isListItem ? element.listItem : undefined,\n      path: blockPath,\n      selected,\n      style,\n      type: schemaTypes.block,\n      value,\n    }\n\n    const propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children\n    return (\n      <div key={element._key} {...attributes} className={className} spellCheck={spellCheck}>\n        <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const type = schemaTypes.blockObjects.find((_type) => _type.name === element._type)\n  if (!type) {\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`)\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor)\n  )[0]\n  const renderedBlockFromProps =\n    renderBlock &&\n    renderBlock({\n      children: <ObjectNode value={value} />,\n      value: block,\n      type,\n      selected,\n      focused,\n      path: blockPath,\n      editorElementRef: blockRef,\n    })\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n","import React, {useRef, useLayoutEffect, useEffect} from 'react'\n\nconst useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect\n\nexport function useForwardedRef<T>(ref: React.ForwardedRef<T>): React.MutableRefObject<T | null> {\n  const innerRef = useRef<T | null>(null)\n\n  useIsomorphicEffect(() => {\n    if (!ref) return\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current)\n    } else {\n      ref.current = innerRef.current\n    }\n  })\n\n  return innerRef\n}\n","import {BaseRange, Transforms, Text} from 'slate'\nimport React, {useCallback, useMemo, useEffect, forwardRef} from 'react'\nimport {\n  Editable as SlateEditable,\n  ReactEditor,\n  RenderElementProps,\n  RenderLeafProps,\n  useSlate,\n} from '@sanity/slate-react'\nimport {noop} from 'lodash'\nimport {\n  EditorSelection,\n  OnBeforeInputFn,\n  OnCopyFn,\n  OnPasteFn,\n  OnPasteResult,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport {HotkeyOptions} from '../types/options'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {normalizeSelection} from '../utils/selection'\nimport {toSlateRange} from '../utils/ranges'\nimport {debugWithName} from '../utils/debug'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\nimport {usePortableTextEditorKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {Leaf} from './components/Leaf'\nimport {Element} from './components/Element'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {createWithInsertData, createWithHotkeys} from './plugins'\nimport {useForwardedRef} from './hooks/useForwardedRef'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: React.CSSProperties = {\n  opacity: 0.5,\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n}\n\nconst EMPTY_DECORATORS: BaseRange[] = []\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: OnBeforeInputFn\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: () => React.ReactNode\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef(function PortableTextEditable(\n  props: PortableTextEditableProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'onPaste'>,\n  forwardedRef: React.ForwardedRef<HTMLDivElement>\n) {\n  const {\n    hotkeys,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const keyGenerator = usePortableTextEditorKeyGenerator()\n  const ref = useForwardedRef(forwardedRef)\n\n  const {change$, schemaTypes} = portableTextEditor\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // React/UI-specific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(change$, schemaTypes, keyGenerator),\n    [change$, keyGenerator, schemaTypes]\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(schemaTypes, keyGenerator, portableTextEditor, hotkeys),\n    [hotkeys, keyGenerator, portableTextEditor, schemaTypes]\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]\n  )\n\n  const renderLeaf = useCallback(\n    (lProps: RenderLeafProps & {leaf: Text & {placeholder?: boolean}}) => {\n      const rendered = (\n        <Leaf\n          {...lProps}\n          keyGenerator={keyGenerator}\n          schemaTypes={schemaTypes}\n          renderAnnotation={renderAnnotation}\n          renderChild={renderChild}\n          renderDecorator={renderDecorator}\n          readOnly={readOnly}\n        />\n      )\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === '') {\n        return (\n          <>\n            <div style={PLACEHOLDER_STYLE} contentEditable={false}>\n              {renderPlaceholder()}\n            </div>\n            {rendered}\n          </>\n        )\n      }\n      return rendered\n    },\n    [\n      keyGenerator,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ]\n  )\n\n  // Restore selection from props\n  useEffect(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName)\n      )\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`)\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set selection operations in the\n          // editor (this is usually automatically outputted by the withPortableTextSelections plugin)\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            change$.next({type: 'selection', selection: normalizedSelection})\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [slateEditor, propsSelection, blockTypeName, change$])\n\n  // Set initial selection from props\n  useEffect(() => {\n    if (propsSelection) {\n      PortableTextEditor.select(portableTextEditor, propsSelection)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy]\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n      // Resolve it as promise (can be either async promise or sync return value)\n      new Promise<OnPasteResult>((resolve) => {\n        resolve(\n          onPaste({\n            event,\n            value: PortableTextEditor.getValue(portableTextEditor),\n            path: slateEditor.selection?.focus.path || [],\n            schemaTypes,\n          })\n        )\n      })\n        .then((result) => {\n          debug('Custom paste function from client resolved', result)\n          change$.next({type: 'loading', isLoading: true})\n          if (!result || !result.insert) {\n            debug('No result from custom paste handler, pasting normally')\n            slateEditor.insertData(event.clipboardData)\n            return\n          }\n          if (result && result.insert) {\n            slateEditor.insertFragment(toSlateValue(result.insert, {schemaTypes}))\n            change$.next({type: 'loading', isLoading: false})\n            return\n          }\n          console.warn('Your onPaste function returned something unexpected:', result)\n        })\n        .catch((error) => {\n          change$.next({type: 'loading', isLoading: false})\n          console.error(error) // eslint-disable-line no-console\n          return error\n        })\n    },\n    [change$, onPaste, portableTextEditor, schemaTypes, slateEditor]\n  )\n\n  const handleOnFocus = useCallback(() => {\n    change$.next({type: 'focus'})\n  }, [change$])\n\n  const handleOnBlur = useCallback(() => {\n    change$.next({type: 'blur'})\n  }, [change$])\n\n  const handleOnBeforeInput = useCallback(\n    (event: Event) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput]\n  )\n\n  const handleKeyDown = slateEditor.pteWithHotKeys\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate = useCallback(() => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        },\n      ]\n    }\n    return EMPTY_DECORATORS\n  }, [schemaTypes, slateEditor])\n\n  // The editor\n  const slateEditable = useMemo(\n    () => (\n      <SlateEditable\n        autoFocus={false}\n        className=\"pt-editable\"\n        decorate={decorate}\n        onBlur={handleOnBlur}\n        onCopy={handleCopy}\n        onDOMBeforeInput={handleOnBeforeInput}\n        onFocus={handleOnFocus}\n        onKeyDown={handleKeyDown}\n        onPaste={handlePaste}\n        readOnly={readOnly}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n      />\n    ),\n    [\n      decorate,\n      handleCopy,\n      handleKeyDown,\n      handleOnBeforeInput,\n      handleOnBlur,\n      handleOnFocus,\n      handlePaste,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoViewToSlate,\n    ]\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return (\n    <div ref={ref} {...restProps}>\n      {slateEditable}\n    </div>\n  )\n})\n"],"names":["compileType","rawType","Schema","compile","name","types","get","getPortableTextMemberSchemaTypes","portableTextType","_a","_b","_c","Error","blockType","of","find","findBlockType","childrenField","fields","field","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","rootName","debug","debugWithName","namespace","enabled","defaultKeyGenerator","randomKey","PortableTextEditorKeyGeneratorContext","createContext","usePortableTextEditorKeyGenerator","keyGenerator","useContext","IS_DRAGGING","WeakMap","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_CHILD_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_ELEMENT_RANGE","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EMPTY_MARKDEFS","keepObjectEquality","object","keyMap","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","_type","rest","voidChildren","text","marks","isPortableText","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","children","child","cType","cKey","cRest","__inline","Element","isElement","fromSlateValue","textBlockType","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","Text","isText","join","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","op","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports","setIfMissing","path","DMP.diff_match_patch","diffMatchPatch","currentValue","nextValue","_patch","insert","items","position","set","unset","createOperationToPatches","textBlockName","insertTextPatch","editor","operation","beforeValue","JSON","stringify","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","newProperties","isUndefined","blockKey","childKey","Object","keys","forEach","keyName","val","insertNodePatch","targetKey","node","blk","splitNodePatch","splitBlock","oldBlock","targetValue","spansToUnset","slice","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","mergedSpan","targetBlock","targetSpan","moveNodePatch","newPath","targetChild","childToInsert","createKeyedPath","point","blockPath","keyedBlockPath","keyedChildPath","childPath","createArrayedPath","from","Editor","nodes","at","isKeySegment","isVoid","childIndex","findIndex","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","toSlateRange","selection","createWithEditableAPI","portableTextEditor","withEditableAPI","setEditable","Transforms","select","onChange","ReactEditor","blur","toggleMark","mark","pteToggleMark","toggleList","listStyle","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","pteIsMarkActive","err","console","warn","undo","redo","slateSelection","deselect","focusBlock","isBlock","focusChild","mode","voids","pseudoBlock","blocks","insertChild","insertNode","insertBlock","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","element","includes","findByPath","slatePath","ptBlock","ptChild","findDOMNode","item","toDOMNode","activeAnnotations","spans","depth","def","addAnnotation","SlateElement","annotationKey","setNodes","Range","isCollapsed","pteExpandToWord","textNode","withoutNormalizing","normalize","newSelection","insertNodes","end","spanPath","markDefPath","delete","hanging","nodeAndPaths","p","removeNodes","removeAnnotation","nodePath","isExpanded","newMarks","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","createWithMaxBlocks","maxBlocks","withMaxBlocks","apply","rows","PRESERVE_KEYS","withPreserveKeys","fn","isPreservingKeys","createWithObjectKeys","withKeys","normalizeNode","properties","withNewKey","isEditor","entry","Node","PATCHING","withoutPatching","prev","isPatching","BEFORE","AFTER","array","index","args","flatten","len","idx","normalizedIdx","copy","values","reduce","hasOwn","call","bind","move","arr","to","findTargetIndex","pathSegment","head","tail","applyPatch","clone","isObject","omit","OPERATIONS","_currentValue","_nextValue","inc","dec","SUPPORTED_PATCH_TYPES","func","applyAll","_apply","applyArrayPatch","isString","applyStringPatch","applyObjectPatch","applyPrimitivePatch","res","createPatchToOperations","findLastKey","blockIndex","indx","parsed","distance","debugState","insertPatch","blocksToInsert","posKey","isKeyedSegment","childrenToInsert","targetPath","setPatch","nextRest","prevChildren","prevRest","c","cIndex","prevSel","onSamePath","newVal","unsetPatch","previousPatch","lastKey","unit","needToAdjust","isMergeUnset","mergedChild","changed","error","segment","key","reverse","part","stateName","bufferUntil","emitWhen","source","defer","buffer","pipe","tap","switchMap","EMPTY","SAVING","MERGING","UNDO_STEP_LIMIT","isMerging","isSaving","createWithUndoRedo","readOnly","patches$","remotePatches","subscriptions","sub","subscribe","origin","time","unsubscribe","history","undos","redos","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldSave","shouldMerge","stp","createSelectOperation","timestamp","shouldClear","otherPatches","transformedOperations","transformOperation","withoutSaving","Operation","inverse","transformedOperation","adjustBlockPath","patchIsRemovingText","some","diff","splitOperation","Path","isPath","insertOffset","insertTextOperation","removeTextOperation","level","myIndex","equals","createWithPatches","change$","isPending","patchFunctions","previousChildren","patchToOperations","withPatches","every","current","concatMap","incoming","snapshot","editorWasEmpty","editorIsEmpty","next","previousValue","createWithPlaceholderBlock","withPlaceholderBlock","createPlaceholderBlock","hadSelection","createWithPortableTextBlockStyle","defaultStyle","withPortableTextBlockStyle","nodeEntry","SlateText","selectedBlocks","MAX_LIST_LEVEL","createWithPortableTextLists","withPortableTextLists","listItemStyle","isActive","pteUnsetListItem","pteSetListItem","isListBlock","listItem","newNode","pteEndList","pteIncrementBlockLevels","createWithPortableTextMarkModel","withPortableTextMarkModel","mergeSpans","isSpan","oldDefs","newMarkDefs","uniq","isNormalized","isElementProps","normalizeMarkDefs","splitNodes","marksWithoutAnnotationMarks","addMark","splitTextNodes","shouldRemoveMark","removeMark","eMark","existingMarks","parent","nextPath","nextNode","mergeNodes","createWithPortableTextSelections","withPortableTextSelections","emitPortableTextSelection","hasChanges","createWithSchemaTypes","withSchemaTypes","isPortableTextTextBlock","isPortableTextSpan","isPortableTextListBlock","obj","isInline","inlineSchemaTypes","isInsertTextWithoutType","insertNodeOperation","createWithUtils","withUtils","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","createEmptyBlock","withHotKeys","pteWithHotKeys","event","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isBackspace","isDelete","prevPath","previous","stopPropagation","nextBlock","focusBlockPath","hasAnnotationFocus","edges","atStartOfNode","isStart","endAtEndOfNode","isEnd","insertText","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","action","currentBlockTypeName","allUsedMarks","cld","annotationMarks","orphanedMarks","spanChildren","cMrk","newSpan","newChild","createWithInsertData","withInsertData","blockTypeName","spanTypeName","toPlainText","title","setFragmentData","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","attributes","hasAttribute","div","ownerDocument","createElement","appendChild","setAttribute","body","asHTML","innerHTML","removeChild","fragment","getFragment","asJSON","asPlainText","clearData","setData","insertPortableTextData","pText","getData","parse","slateValue","regenerateKeys","validation","errorDescription","mixMarkDefs","insertFragment","insertTextOrHTMLData","isLoading","insertedType","htmlToBlocks","normalizeBlock","escapeHtml","textToHtml","insertData","insertFragmentData","entityMap","oldKey","newKey","nodeWithNewKeys","originalFnMap","withPlugins","destroy","operationToPatches","withObjectKeys","withUndoRedo","originalFunctions","noop","unsubscribes","subscribeFn","unsubscribeFn","SlateContainer","props","slateEditor","useMemo","_sub","withReact","createEditor","useEffect","initialValue","Slate","FLUSH_PATCHES_DEBOUNCE_MS","process","env","NODE_ENV","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorContext","usePortableTextEditor","PortableTextEditorValueContext","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","useSyncValue","useRef","userCallbackFn","callbackFn","_","slateValueFromProps","childrenLength","bIndex","currentSel","Synchronizer","useState","pendingPatches","useSlate","syncValue","startTransition","onFlushPendingPatches","useCallback","finalPatches","onFlushPendingPatchesDebounced","debounce","leading","trailing","jsx","Provider","Validator","invalidValueResolution","setInvalidValueResolution","hasNewBlock","isNewValue","Fragment","PortableTextEditor","React","Component","constructor","Subject","editable","schemaType","incomingPatches$","createRef","componentDidUpdate","prevProps","render","_patches$","Boolean","isObjectPath","isChildObjectEditPath","isBlockObjectEditPath","compactPatches","lastPatch","nextPatch","normalizePoint","newOffset","normalizeSelection","newAnchor","newFocus","DefaultAnnotation","handleClick","alert","annotation","color","onClick","DraggableChild","useSlateStatic","dragGhostRef","handleDragOver","isMyDragOver","dataTransfer","dropEffect","findEventRange","handleDragStart","effectAllowed","currentTarget","HTMLElement","dragGhost","cloneNode","width","clientWidth","height","clientHeight","top","left","document","rect","getBoundingClientRect","clientX","clientY","setDragImage","draggable","onDragStart","onDragOver","Leaf","selected","useSelected","leaf","renderChild","spanRef","returnedChildren","focused","decoratorValues","renderDecorator","editorElementRef","renderAnnotation","ref","_child","defaultRendered","DefaultObject","DefaultBlockObject","styled","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","bullets","normalizedLevel","DraggableBlock","blockRef","isDragOver","setIsDragOver","blockElement","setBlockElement","elementRect","Y","pageY","handleDragLeave","handleDragEnd","dragPosition","findPath","myPath","isBefore","originalPath","moveNodes","handleDrop","handleDrag","target","opacity","customGhost","querySelector","boxSizing","isDraggingOverFirstBlock","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","dropIndicator","className","borderBottom","zIndex","jsxs","onDrag","onDragLeave","onDragEnd","onDrop","EMPTY_ANNOTATIONS","inlineBlockStyle","display","renderBlock","renderListItem","renderStyle","spellCheck","inlineBlockObjectRef","renderedBlock","elmPath","contentEditable","ObjectNode","isListItem","blockStyleType","listType","renderProps","propsOrDefaultRendered","renderedBlockFromProps","useIsomorphicEffect","window","useLayoutEffect","useForwardedRef","innerRef","PLACEHOLDER_STYLE","userSelect","pointerEvents","EMPTY_DECORATORS","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","normalizedSelection","slateRange","o","handleCopy","result","handlePaste","clipboardData","Promise","resolve","then","catch","handleOnFocus","handleOnBlur","handleOnBeforeInput","handleKeyDown","scrollSelectionIntoViewToSlate","decorate","slateEditable","SlateEditable","autoFocus","onBlur","onDOMBeforeInput","onFocus","onKeyDown"],"mappings":"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"}