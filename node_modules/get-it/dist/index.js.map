{"version":3,"file":"index.js","sources":["../src/util/middlewareReducer.ts","../src/util/pubsub.ts","../src/createRequester.ts","../src/request/node/proxy.ts","../src/request/node/simpleConcat.ts","../src/request/node/timedOut.ts","../src/request/node/tunnel.ts","../src/request/node-request.ts","../src/index.ts"],"sourcesContent":["export default (middleware: any) => {\n  const applyMiddleware = (hook: any, defaultValue: any, ...args: any[]) => {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  }\n\n  return applyMiddleware\n}\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nexport interface Subscriber<Event> {\n  (event: Event): void\n}\nexport interface PubSub<Message> {\n  publish: (message: Message) => void\n  subscribe: (subscriber: Subscriber<Message>) => () => void\n}\n\nexport default function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","import {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {HttpRequest, Middleware, Middlewares, Requester} from './types'\nimport middlewareReducer from './util/middlewareReducer'\nimport pubsub from './util/pubsub'\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: any[] = []\n  const middleware = middlehooks.reduce(\n    (ware: any, name: any) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    }\n  )\n\n  function request(opts: any) {\n    const channels = channelNames.reduce((target: any, name: any): any => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: any = null\n    const unsubscribe = channels.request.subscribe((ctx: any) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err: any, res: any) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr: any, res: any, ctx: any) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware, httpRequest)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Apache License 2.0\n */\n\nimport url from 'url'\n\nfunction formatHostname(hostname: string) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zoneStr: string) {\n  const zone = zoneStr.trim().toLowerCase()\n\n  const zoneParts = zone.split(':', 2)\n  const zoneHost = formatHostname(zoneParts[0])\n  const zonePort = zoneParts[1]\n  const hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri: any, noProxy: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  const hostname = formatHostname(uri.hostname)\n  const noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some((noProxyZone: any) => {\n    const isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    const hostnameMatched =\n      isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length\n\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromUri(uri: any) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n  const noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment, else default to null\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY || process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return (\n      process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy ||\n      null\n    )\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n  return null\n}\n\nfunction getHostFromUri(uri: any) {\n  let host = uri.host\n\n  // Drop :port suffix from Host header if known protocol.\n  if (uri.port) {\n    if (\n      (uri.port === '80' && uri.protocol === 'http:') ||\n      (uri.port === '443' && uri.protocol === 'https:')\n    ) {\n      host = uri.hostname\n    }\n  }\n\n  return host\n}\n\nfunction getHostHeaderWithPort(uri: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  return `${uri.hostname}:${port}`\n}\n\nexport function rewriteUriForProxy(reqOpts: any, uri: any, proxy: any) {\n  const headers = reqOpts.headers || {}\n  const options = Object.assign({}, reqOpts, {headers})\n  headers.host = headers.host || getHostHeaderWithPort(uri)\n  options.protocol = proxy.protocol || options.protocol\n  options.hostname = proxy.host.replace(/:\\d+/, '')\n  options.port = proxy.port\n  options.host = getHostFromUri(Object.assign({}, uri, proxy))\n  options.href = `${options.protocol}//${options.host}${options.path}`\n  options.path = url.format(uri)\n  return options\n}\n\nexport function getProxyOptions(options: any) {\n  let proxy\n  // eslint-disable-next-line no-prototype-builtins\n  if (options.hasOwnProperty('proxy')) {\n    proxy = options.proxy\n  } else {\n    const uri = url.parse(options.url)\n    proxy = getProxyFromUri(uri)\n  }\n\n  return typeof proxy === 'string' ? url.parse(proxy) : proxy\n}\n","/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexport function concat(stream: any, cb: any) {\n  const chunks: any = []\n  stream.on('data', function (chunk: any) {\n    chunks.push(chunk)\n  })\n  stream.once('end', function () {\n    if (cb) cb(null, Buffer.concat(chunks))\n    cb = null\n  })\n  stream.once('error', function (err: any) {\n    if (cb) cb(err)\n    cb = null\n  })\n}\n","// Copied from `@sanity/timed-out`\n\nexport function timedOut(req: any, time: any) {\n  if (req.timeoutTimer) {\n    return req\n  }\n\n  const delays = isNaN(time) ? time : {socket: time, connect: time}\n  const hostHeader = req.getHeader('host')\n  const host = hostHeader ? ' to ' + hostHeader : ''\n\n  if (delays.connect !== undefined) {\n    req.timeoutTimer = setTimeout(function timeoutHandler() {\n      req.abort()\n      const e: any = new Error('Connection timed out on request' + host)\n      e.code = 'ETIMEDOUT'\n      req.emit('error', e)\n    }, delays.connect)\n  }\n\n  // Clear the connection timeout timer once a socket is assigned to the\n  // request and is connected.\n  req.on('socket', function assign(socket: any) {\n    // Socket may come from Agent pool and may be already connected.\n    if (!(socket.connecting || socket._connecting)) {\n      connect()\n      return\n    }\n\n    socket.once('connect', connect)\n  })\n\n  function clear() {\n    if (req.timeoutTimer) {\n      clearTimeout(req.timeoutTimer)\n      req.timeoutTimer = null\n    }\n  }\n\n  function connect() {\n    clear()\n\n    if (delays.socket !== undefined) {\n      // Abort the request if there is no activity on the socket for more\n      // than `delays.socket` milliseconds.\n      req.setTimeout(delays.socket, function socketTimeoutHandler() {\n        req.abort()\n        const e: any = new Error('Socket timed out on request' + host)\n        e.code = 'ESOCKETTIMEDOUT'\n        req.emit('error', e)\n      })\n    }\n  }\n\n  return req.on('error', clear)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Modified to be less request-specific, more functional\n * Apache License 2.0\n */\nimport * as tunnel from 'tunnel-agent'\nimport url from 'url'\n\nconst uriParts = [\n  'protocol',\n  'slashes',\n  'auth',\n  'host',\n  'port',\n  'hostname',\n  'hash',\n  'search',\n  'query',\n  'pathname',\n  'path',\n  'href',\n]\n\nconst defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via',\n]\n\nconst defaultProxyHeaderExclusiveList = ['proxy-authorization']\n\nexport function shouldEnable(options: any) {\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If user has specified a specific tunnel override...\n  if (typeof options.tunnel !== 'undefined') {\n    return Boolean(options.tunnel)\n  }\n\n  // If the destination is HTTPS, tunnel.\n  const uri = url.parse(options.url)\n  if (uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nexport function applyAgent(opts: any = {}, proxy: any) {\n  const options = Object.assign({}, opts)\n\n  // Setup proxy header exclusive list and whitelist\n  const proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n    .concat(options.proxyHeaderWhiteList || [])\n    .map((header) => header.toLowerCase())\n\n  const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n    .concat(options.proxyHeaderExclusiveList || [])\n    .map((header) => header.toLowerCase())\n\n  // Get the headers we should send to the proxy\n  const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(options)\n\n  // Reduce headers to the ones not exclusive for the proxy\n  options.headers = Object.keys(options.headers || {}).reduce((headers, header) => {\n    const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1\n    if (isAllowed) {\n      headers[header] = options.headers[header]\n    }\n\n    return headers\n  }, {} as any)\n\n  const tunnelFn = getTunnelFn(options, proxy)\n  const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders)\n  options.agent = tunnelFn(tunnelOptions)\n\n  return options\n}\n\nfunction getTunnelFn(options: any, proxy: any) {\n  const uri = getUriParts(options)\n  const tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction getUriParts(options: any) {\n  return uriParts.reduce((uri, part) => {\n    uri[part] = options[part]\n    return uri\n  }, {} as any)\n}\n\ntype UriProtocol = `http` | `https`\ntype ProxyProtocol = `Http` | `Https`\nfunction constructTunnelFnName(uri: any, proxy: any): `${UriProtocol}Over${ProxyProtocol}` {\n  const uriProtocol = uri.protocol === 'https:' ? 'https' : 'http'\n  const proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http'\n  return `${uriProtocol}Over${proxyProtocol}`\n}\n\nfunction constructProxyHost(uri: any) {\n  const port = uri.port\n  const protocol = uri.protocol\n  let proxyHost = `${uri.hostname}:`\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction getAllowedProxyHeaders(headers: any, whiteList: any): any {\n  return Object.keys(headers)\n    .filter((header) => whiteList.indexOf(header.toLowerCase()) !== -1)\n    .reduce((set: any, header: any) => {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions(options: any, proxy: any, proxyHeaders: any) {\n  return {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders,\n    },\n    headers: options.headers,\n    ca: options.ca,\n    cert: options.cert,\n    key: options.key,\n    passphrase: options.passphrase,\n    pfx: options.pfx,\n    ciphers: options.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized,\n    secureOptions: options.secureOptions,\n    secureProtocol: options.secureProtocol,\n  }\n}\n","import decompressResponse from 'decompress-response'\nimport follow from 'follow-redirects'\nimport http from 'http'\nimport https from 'https'\nimport toStream from 'into-stream'\nimport isStream from 'is-stream'\nimport progressStream from 'progress-stream'\nimport qs from 'querystring'\nimport url from 'url'\n\nimport {getProxyOptions, rewriteUriForProxy} from './node/proxy'\nimport {concat} from './node/simpleConcat'\nimport {timedOut} from './node/timedOut'\nimport * as tunneling from './node/tunnel'\n\nconst adapter = 'node'\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (res: any, reqUrl: any, method: any, body: any) => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage,\n})\n\nexport default (context: any, cb: any) => {\n  const options = context.options\n  const uri = Object.assign({}, url.parse(options.url))\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader: any = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err: any, res?: any) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts: any = Object.assign({}, uri, {\n    method: options.method,\n    headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects,\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map((item: any) => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`\n    )\n  }\n\n  // See if we should try to request a compressed response (and decompress on return)\n  const tryCompressed = reqOpts.method !== 'HEAD'\n  if (tryCompressed && !reqOpts.headers['accept-encoding'] && options.compress !== false) {\n    reqOpts.headers['accept-encoding'] = 'br, gzip, deflate'\n  }\n\n  const finalOptions = context.applyMiddleware('finalizeOptions', reqOpts)\n  const request = transport.request(finalOptions, (response: any) => {\n    const res = tryCompressed ? decompressResponse(response) : response\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context,\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = response.responseUrl || options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err: any, data: any) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  request.once('error', callback)\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options: any) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : toStream(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(reqOpts: any, proxy: any, tunnel: any): any {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n\nfunction lowerCaseHeaders(headers: any) {\n  return Object.keys(headers || {}).reduce((acc, header) => {\n    acc[header.toLowerCase()] = headers[header]\n    return acc\n  }, {} as any)\n}\n","import {createRequester} from './createRequester'\nimport httpRequester from './request/node-request'\nimport type {HttpRequest, Middlewares, Requester} from './types'\n\nexport * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester\n): Requester => createRequester(initMiddleware, httpRequest)\n"],"names":["middlewareReducer","middleware","applyMiddleware","hook","defaultValue","bailEarly","value","args","i","length","handler","createPubSub","subscribers","Object","create","nextId","subscribe","subscriber","id","unsubscribe","publish","event","channelNames","middlehooks","createRequester","initMiddleware","httpRequest","loadedMiddleware","reduce","ware","name","processOptions","validateOptions","request","opts","channels","target","pubsub","options","context","ongoingRequest","ctx","err","res","onResponse","abort","returnValue","reqErr","error","response","use","newMiddleware","Error","onReturn","forEach","key","push","clone","formatHostname","hostname","replace","toLowerCase","parseNoProxyZone","zoneStr","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","noProxyZone","isMatchedAt","hostnameMatched","getProxyFromUri","process","env","NO_PROXY","no_proxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","getHostFromUri","host","getHostHeaderWithPort","rewriteUriForProxy","reqOpts","proxy","headers","assign","href","path","url","format","getProxyOptions","hasOwnProperty","parse","concat","stream","cb","chunks","on","chunk","once","Buffer","timedOut","req","time","timeoutTimer","delays","isNaN","socket","connect","hostHeader","getHeader","setTimeout","timeoutHandler","e","code","emit","connecting","_connecting","clear","clearTimeout","socketTimeoutHandler","uriParts","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","shouldEnable","tunnel","Boolean","applyAgent","proxyHeaderWhiteList","header","proxyHeaderExclusiveList","proxyHeaders","getAllowedProxyHeaders","constructProxyHost","keys","isAllowed","tunnelFn","getTunnelFn","tunnelOptions","constructTunnelOptions","agent","getUriParts","tunnelFnName","constructTunnelFnName","part","uriProtocol","proxyProtocol","proxyHost","whiteList","filter","set","proxyAuth","auth","ca","cert","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol","adapter","reduceResponse","reqUrl","method","body","statusCode","statusMessage","httpRequester","bodyType","isStream","isBuffer","lengthHeader","bodySize","byteLength","aborted","callback","lowerCaseHeaders","maxRedirects","tunneling.shouldEnable","injectedResponse","cbTimer","setImmediate","clearImmediate","tunneling.applyAgent","username","password","item","qs","unescape","from","authBase64","toString","transport","getRequestTransport","debug","tryCompressed","compress","finalOptions","decompressResponse","resStream","responseUrl","data","rawBody","reduced","timeout","bodyStream","progress","getProgressStream","pipe","end","bodyIsStream","progressStream","toStream","isHttpsRequest","transports","http","https","follow","isHttpsProxy","test","acc","getIt"],"mappings":"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"}